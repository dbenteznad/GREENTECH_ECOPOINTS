{
  "version": 3,
  "sources": ["../../rivescript/src/utils.js", "../../rivescript/src/parser.js", "../../rivescript/src/inheritance.js", "../../rivescript/src/brain.js", "../../rivescript/src/sorting.js", "../../rivescript/src/sessions.js", "../../rivescript/src/lang/javascript.js", "browser-external:fs", "browser-external:path", "../../fs-readdir-recursive/index.js", "../../rivescript/src/rivescript.js"],
  "sourcesContent": ["// RiveScript.js\n// https://www.rivescript.com/\n\n// This code is released under the MIT License.\n// See the \"LICENSE\" file for more information.\n\n\"use strict\";\n\n/**\nMiscellaneous utility functions.\n*/\n\n/**\nstring strip (string)\n\nStrip extra whitespace from both ends of the string, and remove\nline breaks anywhere in the string.\n*/\nexports.strip = function(text) {\n\ttext = text.replace(/^[\\s\\t]+/, \"\").replace(/[\\s\\t]+$/, \"\").replace(/[\\x0D\\x0A]+/, \"\");\n\treturn text;\n};\n\n/**\nstring trim (string)\n\nCompatible implementation of `String.prototype.trim()`. Strips whitespace\nfrom the beginning and end of the string, but doesn't remove any\nwhitespace inside the string like `strip()` does.\n*/\nexports.trim = function(text) {\n\ttext = text.replace(/^[\\x0D\\x0A\\s\\t]+/, \"\").replace(/[\\x0D\\x0A\\s\\t]+$/, \"\");\n\treturn text;\n};\n\n/**\nvoid extend (object a, object b)\n\nCombine the properties of both objects into one. The properties from\nobject 'b' are inserted into 'a'.\n*/\nexports.extend = function(a, b) {\n\tvar attr, results, value;\n\tresults = [];\n\tfor (attr in b) {\n\t\tvalue = b[attr];\n\t\tif (!b.hasOwnProperty(attr)) {\n\t\t\tcontinue;\n\t\t}\n\t\tresults.push(a[attr] = value);\n\t}\n\treturn results;\n};\n\n/**\nint word_count (string)\n\nCount the number of real words in a string.\n*/\nexports.word_count = function(trigger, all) {\n\tvar i, len, wc, word, words;\n\twords = [];\n\tif (all) {\n\t\twords = trigger.split(/\\s+/);\n\t} else {\n\t\twords = trigger.split(/[\\s\\*\\#_\\|]+/);\n\t}\n\twc = 0;\n\tfor (i = 0, len = words.length; i < len; i++) {\n\t\tword = words[i];\n\t\tif (word.length > 0) {\n\t\t\twc++;\n\t\t}\n\t}\n\treturn wc;\n};\n\n/**\nstring stripNasties (string, bool utf8)\n\nStip special characters out of a string.\n*/\nexports.stripNasties = function(string, utf8) {\n\tif (utf8) {\n\t\t// Allow most things in UTF8 mode.\n\t\tstring = string.replace(/[\\\\<>]+/g, \"\");\n\t\treturn string;\n\t}\n\tstring = string.replace(/[^A-Za-z0-9 ]/g, \"\");\n\treturn string;\n};\n\n/**\nstring quotemeta (string)\n\nEscape a string for a regexp.\n*/\nexports.quotemeta = function(string) {\n\tvar char, i, len, unsafe;\n\tunsafe = \"\\\\.+*?[^]$(){}=!<>|:\".split(\"\");\n\tfor (i = 0, len = unsafe.length; i < len; i++) {\n\t\tchar = unsafe[i];\n\t\tstring = string.replace(new RegExp(`\\\\${char}`, \"g\"), `\\\\${char}`);\n\t}\n\treturn string;\n};\n\n/**\nbool isAtomic (string trigger)\n\nDetermine whether a trigger is atomic.\n*/\nexports.isAtomic = function(trigger) {\n\tvar i, len, ref, special;\n\tref = [\"*\", \"#\", \"_\", \"(\", \"[\", \"<\", \"@\"];\n\t// Atomic triggers don't contain any wildcards or parenthesis or anything of\n\t// the sort. We don't need to test the full character set, just left brackets\n\t// will do.\n\tfor (i = 0, len = ref.length; i < len; i++) {\n\t\tspecial = ref[i];\n\t\tif (trigger.indexOf(special) > -1) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\n/**\nstring stringFormat (string type, string)\n\nFormats a string according to one of the following types:\n- formal\n- sentence\n- uppercase\n- lowercase\n*/\nexports.stringFormat = function(type, string) {\n\tvar first, i, len, result, word, words;\n\tif (type === \"uppercase\") {\n\t\treturn string.toUpperCase();\n\t} else if (type === \"lowercase\") {\n\t\treturn string.toLowerCase();\n\t} else if (type === \"sentence\") {\n\t\tstring += \"\";\n\t\tfirst = string.charAt(0).toUpperCase();\n\t\treturn first + string.substring(1);\n\t} else if (type === \"formal\") {\n\t\twords = string.split(/\\s+/);\n\t\tresult = [];\n\t\tfor (i = 0, len = words.length; i < len; i++) {\n\t\t\tword = words[i];\n\t\t\tfirst = word.charAt(0).toUpperCase();\n\t\t\tresult.push(first + word.substring(1));\n\t\t}\n\t\treturn result.join(\" \");\n\t}\n\treturn content;\n};\n\n/**\n[]string parseCallArgs\n\nParse a string and return shell-like arguments as an array. Normally this\nmeans each word in the string becomes an item in the result, but quoted\nsections of the input will come back as a single item.\n\nExample:\n\n```javascript\nconsole.log( parseCallArgs('please google \"writing chat bot\"'));\n// [\"please\", \"google\", \"writing chat bot\"]\n```\n*/\nexports.parseCallArgs = function(str) {\n\tvar buff, c, doubleQuoteRe, flushBuffer, i, insideAString, len, result, spaceRe;\n\tresult = [];\n\tbuff = \"\";\n\tinsideAString = false;\n\tspaceRe = /\\s/ig;\n\tdoubleQuoteRe = /\"/ig;\n\tflushBuffer = function() {\n\t\tif (buff.length !== 0) {\n\t\t\tresult.push(buff);\n\t\t}\n\t\treturn buff = \"\";\n\t};\n\tfor (i = 0, len = str.length; i < len; i++) {\n\t\tc = str[i];\n\t\tif (c.match(spaceRe) && !insideAString) {\n\t\t\tflushBuffer();\n\t\t\tcontinue;\n\t\t}\n\t\tif (c.match(doubleQuoteRe)) {\n\t\t\tif (insideAString) {\n\t\t\t\tflushBuffer();\n\t\t\t}\n\t\t\tinsideAString = !insideAString;\n\t\t\tcontinue;\n\t\t}\n\t\tbuff += c;\n\t}\n\tflushBuffer();\n\treturn result;\n};\n\n/**\nobject clone (object)\n\nClone an object.\n*/\nexports.clone = function(obj) {\n\tvar copy, key;\n\tif (obj === null || typeof obj !== \"object\") {\n\t\treturn obj;\n\t}\n\tcopy = obj.constructor();\n\tfor (key in obj) {\n\t\tif (!obj.hasOwnProperty(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\tcopy[key] = exports.clone(obj[key]);\n\t}\n\treturn copy;\n};\n\n/**\nint nIndexOf (string, string match, int index)\n\nFinds a match in a string at a given index\n\nUsage:\nstring = \"My name is Rive\"\nmatch = \" \"\nindex = 2\nreturn = 7\n\nSummary: It will look for a second space in the string\n*/\nexports.nIndexOf = function(string, match, index) {\n\treturn string.split(match, index).join(match).length;\n};\n", "// RiveScript.js\n// https://www.rivescript.com/\n\n// This code is released under the MIT License.\n// See the \"LICENSE\" file for more information.\n\n\"use strict\";\n\n// Parser for RiveScript syntax.\nconst utils = require(\"./utils\");\n\n// The version of the RiveScript language we support.\nconst RS_VERSION = \"2.0\";\n\n/**\nParser (RiveScript master)\n\nCreate a parser object to handle parsing RiveScript code.\n*/\nconst Parser = class Parser {\n\tconstructor(master) {\n\t\tvar self = this;\n\t\tself.master = master;\n\t\tself.strict = master._strict;\n\t\tself.utf8 = master._utf8;\n\t}\n\n\t// Proxy functions\n\tsay(message) {\n\t\treturn this.master.say(message);\n\t}\n\twarn(message, filename, lineno) {\n\t\treturn this.master.warn(message, filename, lineno);\n\t}\n\n\t/**\n\tobject parse (string filename, string code[, func onError])\n\n\tRead and parse a RiveScript document. Returns a data structure that\n\trepresents all of the useful contents of the document, in this format:\n\n\t```javascript\n\t{\n\t  \"begin\": { // \"begin\" data\n\t    \"global\": {}, // ! global vars\n\t    \"var\": {},    // ! bot vars\n\t    \"sub\": {},    // ! sub substitutions\n\t    \"person\": {}, // ! person substitutions\n\t    \"array\": {},  // ! array lists\n\t  },\n\t  \"topics\": { // main reply data\n\t    \"random\": { // (topic name)\n\t      \"includes\": {}, // included topics\n\t      \"inherits\": {}, // inherited topics\n\t      \"triggers\": [ // array of triggers\n\t        {\n\t          \"trigger\": \"hello bot\",\n\t          \"reply\": [], // array of replies\n\t          \"condition\": [], // array of conditions\n\t          \"redirect\": \"\",  // @ redirect command\n\t          \"previous\": null, // % previous command\n\t        },\n\t        ...\n\t      ]\n\t    }\n\t  },\n\t  \"objects\": [ // parsed object macros\n\t    {\n\t      \"name\": \"\",     // object name\n\t      \"language\": \"\", // programming language\n\t      \"code\": [],     // object source code (in lines)\n\t    }\n\t  ]\n\t}\n\t```\n\n\tonError function receives: `(err string[, filename str, line_no int])`\n\t*/\n\tparse(filename, code, onError) {\n\t\tvar self = this;\n\n\t\tif (onError === undefined) {\n\t\t\tonError = function(err, filename, lineno) {\n\t\t\t\tself.warn(err, filename, lineno);\n\t\t\t};\n\t\t}\n\n\t\t// Eventual return structure (\"abstract syntax tree\" except not really)\n\t\tlet ast = {\n\t\t\tbegin: {\n\t\t\t\tglobal: {},\n\t\t\t\tvar: {},\n\t\t\t\tsub: {},\n\t\t\t\tperson: {},\n\t\t\t\tarray: {}\n\t\t\t},\n\t\t\ttopics: {},\n\t\t\tobjects: []\n\t\t};\n\n\t\t// Track temporary variables.\n\t\tlet topic = \"random\"; // Default topic = random\n\t\tlet comment = false; // In a multi-line comment.\n\t\tlet inobj = false; // In an object macro\n\t\tlet objName = \"\"; // Name of the object we're in\n\t\tlet objLang = \"\"; // The programming language of the object\n\t\tlet objBuf = []; // Source code buffer of the object\n\t\tlet curTrig = null; // Pointer to the current trigger in the ast.topics\n\t\tlet lastcmd = \"\"; // Last command code\n\t\tlet isThat = null; // Is a %Previous trigger\n\n\t\t// Local (file scoped) parser options\n\t\tlet localOptions = {\n\t\t\tconcat: self.master._concat != null ? self.master._concat : \"none\"\n\t\t};\n\n\t\t// Supported concat modes for `! local concat`\n\t\tconst concatModes = {\n\t\t\tnone: \"\",\n\t\t\tnewline: \"\\n\",\n\t\t\tspace: \" \"\n\t\t};\n\n\t\t// Go through the lines of code.\n\t\tlet lines = code.split(\"\\n\");\n\t\tfor (let lp = 0, len = lines.length; lp < len; lp++) {\n\t\t\tlet line = lines[lp];\n\t\t\tlet lineno = lp + 1;\n\n\t\t\t// Strip the line.\n\t\t\tline = utils.strip(line);\n\t\t\tif (line.length === 0) {\n\t\t\t\tcontinue; // Skip blank lines!\n\t\t\t}\n\n\t\t\t//-----------------------------\n\t\t\t// Are we inside an `> object`?\n\t\t\t//-----------------------------\n\t\t\tif (inobj) {\n\t\t\t\t// End of the object?\n\t\t\t\tif (line.indexOf(\"< object\") > -1 || line.indexOf(\"<object\") > -1) { // TODO\n\t\t\t\t\t// End the object.\n\t\t\t\t\tif (objName.length > 0) {\n\t\t\t\t\t\tast.objects.push({\n\t\t\t\t\t\t\tname: objName,\n\t\t\t\t\t\t\tlanguage: objLang,\n\t\t\t\t\t\t\tcode: objBuf\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tobjName = objLang = \"\";\n\t\t\t\t\tobjBuf = [];\n\t\t\t\t\tinobj = false;\n\t\t\t\t} else {\n\t\t\t\t\tobjBuf.push(line);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//------------------\n\t\t\t// Look for comments\n\t\t\t//------------------\n\t\t\tif (line.indexOf(\"//\") === 0) { // Single line comment\n\t\t\t\tcontinue;\n\t\t\t} else if (line.indexOf(\"#\") === 0) { // Old style single line comment\n\t\t\t\tself.warn(\"Using the # symbol for comments is deprecated\", filename, lineno);\n\t\t\t\tcontinue;\n\t\t\t} else if (line.indexOf(\"/*\") === 0) {\n\t\t\t\t// Start of a multi-line comment.\n\t\t\t\tif (line.indexOf(\"*/\") > -1) {\n\t\t\t\t\t// The end comment is on the same line!\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// We're now inside a multi-line comment.\n\t\t\t\tcomment = true;\n\t\t\t\tcontinue;\n\t\t\t} else if (line.indexOf(\"*/\") > -1) {\n\t\t\t\t// End of a multi-line comment.\n\t\t\t\tcomment = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (comment) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Separate the command from the data\n\t\t\tif (line.length < 2) {\n\t\t\t\tself.warn(`Weird single-character line '${line}' found (in topic ${topic})`, filename, lineno);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet cmd = line.substring(0, 1);\n\t\t\tline = utils.strip(line.substring(1));\n\n\t\t\t// Ignore in-line comments if there's a space before and after the \"//\"\n\t\t\tif (line.indexOf(\" //\") > -1) {\n\t\t\t\tline = utils.strip(line.split(\" //\")[0]);\n\t\t\t}\n\n\t\t\t// Allow the ?Keyword command to work around UTF-8 bugs for users who\n\t\t\t// wanted to use `+ [*] keyword [*]` with Unicode symbols that don't match\n\t\t\t// properly with the usual \"optional wildcard\" syntax.\n\t\t\tif (cmd === \"?\") {\n\t\t\t\t// The ?Keyword command is really an alias to +Trigger with some workarounds\n\t\t\t\t// to make it match the keyword _anywhere_, in every variation so it works\n\t\t\t\t// with Unicode strings.\n\t\t\t\tlet variants = [\n\t\t\t\t\tline,\n\t\t\t\t\t`[*]${line}[*]`,\n\t\t\t\t\t`*${line}*`,\n\t\t\t\t\t`[*]${line}*`,\n\t\t\t\t\t`*${line}[*]`,\n\t\t\t\t\t`${line}*`,\n\t\t\t\t\t`*${line}`\n\t\t\t\t];\n\t\t\t\tcmd = \"+\";\n\t\t\t\tline = \"(\" + variants.join(\"|\") + \")\";\n\t\t\t\tself.say(`Rewrote ?Keyword as +Trigger: ${line}`);\n\t\t\t}\n\n\t\t\t// In the event of a +Trigger, if we are force-lowercasing it, then do so\n\t\t\t// now before the syntax check.\n\t\t\tif (self.master._forceCase === true && cmd === \"+\") {\n\t\t\t\tline = line.toLowerCase();\n\t\t\t}\n\n\t\t\t// Run a syntax check on this line.\n\t\t\tlet syntaxError = self.checkSyntax(cmd, line);\n\t\t\tif (syntaxError !== \"\") {\n\t\t\t\tif (self.strict) {\n\t\t\t\t\tonError.call(null, `Syntax error: ${syntaxError} at ${filename} line ${lineno} near ${cmd} ${line}`);\n\t\t\t\t} else {\n\t\t\t\t\tself.warn(`Syntax error: ${syntaxError} at ${filename} line ${lineno} near ${cmd} ${line} (in topic ${topic})`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Reset the %Previous state if this is a new +Trigger.\n\t\t\tif (cmd === \"+\") {\n\t\t\t\tisThat = null;\n\t\t\t}\n\n\t\t\tself.say(`Cmd: ${cmd}; line: ${line}`);\n\t\t\t// Do a look-ahead for ^Continue and %Previous commands.\n\t\t\tfor (let li = lp+1, len2 = lines.length; li < len2; li++) {\n\t\t\t\tlet lookahead = lines[li];\n\t\t\t\tlookahead = utils.strip(lookahead);\n\t\t\t\tif (lookahead.length < 2) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet lookCmd = lookahead.substring(0, 1);\n\t\t\t\tlookahead = utils.strip(lookahead.substring(1));\n\n\t\t\t\t// We only care about a couple lookahead command types.\n\t\t\t\tif (lookCmd !== \"%\" && lookCmd !== \"^\") {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Only continue if the lookahead has any data.\n\t\t\t\tif (lookahead.length === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tself.say(`\\tLookahead ${li}: ${lookCmd} ${lookahead}`);\n\n\t\t\t\t// If the current command is a +, see if the following is a %.\n\t\t\t\tif (cmd === \"+\") {\n\t\t\t\t\tif (lookCmd === \"%\") {\n\t\t\t\t\t\tisThat = lookahead;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisThat = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If the current command is a ! and the next command(s) are ^ we'll\n\t\t\t\t// tack each extension on as a line break (which is useful information\n\t\t\t\t// for arrays).\n\t\t\t\tif (cmd === \"!\") {\n\t\t\t\t\tif (lookCmd === \"^\") {\n\t\t\t\t\t\tline += `<crlf>${lookahead}`;\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// If the current command is not a ^, and the line after is not a %,\n\t\t\t\t// but the line after IS a ^, then tack it on to the end of the current\n\t\t\t\t// line.\n\t\t\t\tif (cmd !== \"^\" && lookCmd !== \"%\") {\n\t\t\t\t\tif (lookCmd === \"^\") {\n\t\t\t\t\t\t// Which character to concatenate with?\n\t\t\t\t\t\tif (concatModes[localOptions.concat] !== void 0) {\n\t\t\t\t\t\t\tline += concatModes[localOptions.concat] + lookahead;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tline += lookahead;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar type = \"\", name = \"\";\n\n\t\t\t// Handle the types of RiveScript commands.\n\t\t\tswitch (cmd) {\n\t\t\t\tcase \"!\": // ! Define\n\t\t\t\t\tlet halves = line.split(\"=\", 2);\n\t\t\t\t\tlet left = utils.strip(halves[0]).split(\" \");\n\t\t\t\t\tlet value = \"\";\n\t\t\t\t\tname = \"\";\n\t\t\t\t\ttype = \"\";\n\t\t\t\t\tif (halves.length === 2) {\n\t\t\t\t\t\tvalue = utils.strip(halves[1]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (left.length >= 1) {\n\t\t\t\t\t\ttype = utils.strip(left[0]);\n\t\t\t\t\t\tif (left.length >= 2) {\n\t\t\t\t\t\t\tleft.shift();\n\t\t\t\t\t\t\tname = utils.strip(left.join(\" \"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove 'fake' line breaks unless this is an array.\n\t\t\t\t\tif (type !== \"array\") {\n\t\t\t\t\t\tvalue = value.replace(/<crlf>/g, \"\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Handle version numbers.\n\t\t\t\t\tif (type === \"version\") {\n\t\t\t\t\t\tif (parseFloat(value) > parseFloat(RS_VERSION)) {\n\t\t\t\t\t\t\tonError.call(null, `Unsupported RiveScript version. We only support ${RS_VERSION} at ${filename} line ${lineno}`, filename, lineno);\n\t\t\t\t\t\t\treturn ast;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// All other types of defines require a value and variable name.\n\t\t\t\t\tif (name.length === 0) {\n\t\t\t\t\t\tself.warn(\"Undefined variable name\", filename, lineno);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (value.length === 0) {\n\t\t\t\t\t\tself.warn(\"Undefined variable value\", filename, lineno);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Handle the rest of the !Define types.\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase \"local\":\n\t\t\t\t\t\t\t// Local file-scoped parser options.\n\t\t\t\t\t\t\tself.say(`\\tSet local parser option ${name} = ${value}`);\n\t\t\t\t\t\t\tlocalOptions[name] = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"global\":\n\t\t\t\t\t\t\t// Set a 'global' variable.\n\t\t\t\t\t\t\tself.say(`\\tSet global ${name} = ${value}`);\n\t\t\t\t\t\t\tast.begin.global[name] = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"var\":\n\t\t\t\t\t\t\t// Bot variables.\n\t\t\t\t\t\t\tself.say(`\\tSet bot variable ${name} = ${value}`);\n\t\t\t\t\t\t\tast.begin.var[name] = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"array\":\n\t\t\t\t\t\t\t// Arrays\n\t\t\t\t\t\t\tif (value === \"<undef>\") {\n\t\t\t\t\t\t\t\tast.begin.array[name] = \"<undef>\";\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Did this have multiple parts?\n\t\t\t\t\t\t\tlet parts = value.split(\"<crlf>\");\n\n\t\t\t\t\t\t\t// Process each line of array data.\n\t\t\t\t\t\t\tlet fields = [];\n\t\t\t\t\t\t\tfor (let l = 0, len2 = parts.length; l < len2; l++) {\n\t\t\t\t\t\t\t\tlet val = parts[l];\n\t\t\t\t\t\t\t\tif (val.indexOf(\"|\") > -1) {\n\t\t\t\t\t\t\t\t\tfields.push.apply(fields, val.split(\"|\"));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfields.push.apply(fields, val.split(\" \"));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Convert any remaining '\\s' over.\n\t\t\t\t\t\t\tfor (let i = 0, len3 = fields.length; i < len3; i++) {\n\t\t\t\t\t\t\t\tlet field = fields[i];\n\t\t\t\t\t\t\t\tfields[i] = fields[i].replace(/\\\\s/ig, \" \");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Delete any empty fields.\n\t\t\t\t\t\t\tfields = fields.filter(function(val) {\n\t\t\t\t\t\t\t\treturn val !== '';\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tself.say(`\\tSet array ${name} = ${JSON.stringify(fields)}`);\n\t\t\t\t\t\t\tast.begin.array[name] = fields;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"sub\":\n\t\t\t\t\t\t\t// Substitutions\n\t\t\t\t\t\t\tself.say(`\\tSet substitution ${name} = ${value}`);\n\t\t\t\t\t\t\tast.begin.sub[name] = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"person\":\n\t\t\t\t\t\t\t// Person substitutions\n\t\t\t\t\t\t\tself.say(`\\tSet person substitution ${name} = ${value}`);\n\t\t\t\t\t\t\tast.begin.person[name] = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tself.warn(`Unknown definition type ${type}`, filename, lineno);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \">\":\n\t\t\t\t\t// > Label\n\t\t\t\t\tlet temp = utils.strip(line).split(\" \");\n\t\t\t\t\ttype = temp.shift();\n\t\t\t\t\tname = \"\";\n\t\t\t\t\tlet fields = [];\n\t\t\t\t\tif (temp.length > 0) {\n\t\t\t\t\t\tname = temp.shift();\n\t\t\t\t\t}\n\t\t\t\t\tif (temp.length > 0) {\n\t\t\t\t\t\tfields = temp;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Handle the label types.\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase \"begin\":\n\t\t\t\t\t\tcase \"topic\":\n\t\t\t\t\t\t\tif (type === \"begin\") {\n\t\t\t\t\t\t\t\tself.say(\"Found the BEGIN block.\");\n\t\t\t\t\t\t\t\ttype = \"topic\";\n\t\t\t\t\t\t\t\tname = \"__begin__\";\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Force case on topics.\n\t\t\t\t\t\t\tif (self.master._forceCase === true) {\n\t\t\t\t\t\t\t\tname = name.toLowerCase();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Starting a new topic.\n\t\t\t\t\t\t\tself.say(`Set topic to ${name}`);\n\t\t\t\t\t\t\tcurTrig = null;\n\t\t\t\t\t\t\ttopic = name;\n\n\t\t\t\t\t\t\t// Initialize the topic tree.\n\t\t\t\t\t\t\tself.initTopic(ast.topics, topic);\n\n\t\t\t\t\t\t\t// Does this topic include or inherit another one?\n\t\t\t\t\t\t\tlet mode = \"\";\n\t\t\t\t\t\t\tif (fields.length >= 2) {\n\t\t\t\t\t\t\t\tfor (let n = 0, len4 = fields.length; n < len4; n++) {\n\t\t\t\t\t\t\t\t\tlet field = fields[n];\n\t\t\t\t\t\t\t\t\tif (field === \"includes\" || field === \"inherits\") {\n\t\t\t\t\t\t\t\t\t\tmode = field;\n\t\t\t\t\t\t\t\t\t} else if (mode !== \"\") {\n\t\t\t\t\t\t\t\t\t\t// This topic is either inherited or included.\n\t\t\t\t\t\t\t\t\t\tast.topics[topic][mode][field] = 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"object\":\n\t\t\t\t\t\t\t// If a field was provided, it should be the programming language.\n\t\t\t\t\t\t\tlet lang = \"\";\n\t\t\t\t\t\t\tif (fields.length > 0) {\n\t\t\t\t\t\t\t\tlang = fields[0].toLowerCase();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Missing language, try to assume it's JS.\n\t\t\t\t\t\t\tif (lang === \"\") {\n\t\t\t\t\t\t\t\tself.warn(\"Trying to parse unknown programming language\", filename, lineno);\n\t\t\t\t\t\t\t\tlang = \"javascript\";\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Start reading the object code.\n\t\t\t\t\t\t\tobjName = name;\n\t\t\t\t\t\t\tobjLang = lang;\n\t\t\t\t\t\t\tobjBuf = [];\n\t\t\t\t\t\t\tinobj = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tself.warn(`Unknown label type ${type}`, filename, lineno);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"<\":\n\t\t\t\t\t// < Label\n\t\t\t\t\ttype = line;\n\t\t\t\t\tif (type === \"begin\" || type === \"topic\") {\n\t\t\t\t\t\tself.say(\"\\tEnd the topic label.\");\n\t\t\t\t\t\ttopic = \"random\";\n\t\t\t\t\t} else if (type === \"object\") {\n\t\t\t\t\t\tself.say(\"\\tEnd the object label.\");\n\t\t\t\t\t\tinobj = false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"+\":\n\t\t\t\t\t// + Trigger\n\t\t\t\t\tself.say(`\\tTrigger pattern: ${line}`);\n\n\t\t\t\t\t// Initialize the trigger tree.\n\t\t\t\t\tself.initTopic(ast.topics, topic);\n\t\t\t\t\tcurTrig = {\n\t\t\t\t\t\ttrigger: line,\n\t\t\t\t\t\treply: [],\n\t\t\t\t\t\tcondition: [],\n\t\t\t\t\t\tredirect: null,\n\t\t\t\t\t\tprevious: isThat\n\t\t\t\t\t};\n\t\t\t\t\tast.topics[topic].triggers.push(curTrig);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\t// - Response\n\t\t\t\t\tif (curTrig === null) {\n\t\t\t\t\t\tself.warn(\"Response found before trigger\", filename, lineno);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Warn if we also saw a hard redirect.\n\t\t\t\t\tif (curTrig.redirect !== null) {\n\t\t\t\t\t\tself.warn(\"You can't mix @Redirects with -Replies\", filename, lineno);\n\t\t\t\t\t}\n\n\t\t\t\t\tself.say(`\\tResponse: ${line}`);\n\t\t\t\t\tcurTrig.reply.push(line);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\t// * Condition\n\t\t\t\t\tif (curTrig === null) {\n\t\t\t\t\t\tself.warn(\"Condition found before trigger\", filename, lineno);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Warn if we also saw a hard redirect.\n\t\t\t\t\tif (curTrig.redirect !== null) {\n\t\t\t\t\t\tself.warn(\"You can't mix @Redirects with *Conditions\", filename, lineno);\n\t\t\t\t\t}\n\n\t\t\t\t\tself.say(`\\tCondition: ${line}`);\n\t\t\t\t\tcurTrig.condition.push(line);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"%\":\n\t\t\t\t\t// % Previous\n\t\t\t\t\tcontinue; // This was handled above\n\t\t\t\tcase \"^\":\n\t\t\t\t\t// ^ Continue\n\t\t\t\t\tcontinue; // This was handled above\n\t\t\t\tcase \"@\":\n\t\t\t\t\t// @ Redirect\n\t\t\t\t\t// Make sure they didn't mix them with incompatible commands.\n\t\t\t\t\tif (curTrig.reply.length > 0 || curTrig.condition.length > 0) {\n\t\t\t\t\t\tself.warn(\"You can't mix @Redirects with -Replies or *Conditions\", filename, lineno);\n\t\t\t\t\t}\n\t\t\t\t\tself.say(`\\tRedirect response to: ${line}`);\n\t\t\t\t\tcurTrig.redirect = utils.strip(line);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tself.warn(`Unknown command '${cmd}' (in topic ${topic})`, filename, lineno);\n\t\t\t}\n\t\t}\n\n\t\treturn ast;\n\t}\n\n\t/**\n\tstring stringify (data deparsed)\n\n\tTranslate deparsed data into the source code of a RiveScript document.\n\tSee the `stringify()` method on the parent RiveScript class; this is its\n\timplementation.\n\t*/\n\tstringify(deparsed) {\n\t\tvar self = this;\n\n\t\tif (deparsed == null) {\n\t\t\tdeparsed = self.master.deparse();\n\t\t}\n\n\t\t// Helper function to write out the contents of triggers.\n\t\tlet _writeTriggers = function(triggers, indent) {\n\t\t\tlet id = indent ? \"\\t\" : \"\";\n\t\t\tlet output = [];\n\t\t\tfor (let j = 0, len = triggers.length; j < len; j++) {\n\t\t\t\tlet t = triggers[j];\n\t\t\t\toutput.push(`${id}+ ${t.trigger}`);\n\t\t\t\tif (t.previous) {\n\t\t\t\t\toutput.push(`${id}% ${t.previous}`);\n\t\t\t\t}\n\t\t\t\tif (t.condition) {\n\t\t\t\t\tfor (let k = 0, len1 = t.condition.length; k < len1; k++) {\n\t\t\t\t\t\tlet c = t.condition[k];\n\t\t\t\t\t\toutput.push(`${id}* ${c.replace(/\\n/mg, \"\\\\n\")}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (t.redirect) {\n\t\t\t\t\toutput.push(`${id}@ ${t.redirect}`);\n\t\t\t\t}\n\t\t\t\tif (t.reply) {\n\t\t\t\t\tfor (let l = 0, len2 = t.reply.length; l < len2; l++) {\n\t\t\t\t\t\tlet r = t.reply[l];\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\toutput.push(`${id}- ${r.replace(/\\n/mg, \"\\\\n\")}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toutput.push(\"\");\n\t\t\t}\n\t\t\treturn output;\n\t\t};\n\n\t\t// Lines of code to return.\n\t\tconst source = [\"! version = 2.0\", \"! local concat = none\", \"\"];\n\t\tconst ref    = [\"global\", \"var\", \"sub\", \"person\", \"array\"];\n\n\t\t// Stringify begin-like data first.\n\t\tfor (let j = 0, len = ref.length; j < len; j++) {\n\t\t\tlet begin = ref[j];\n\t\t\tif ((deparsed.begin[begin] != null) && Object.keys(deparsed.begin[begin]).length) {\n\t\t\t\tfor (const key in deparsed.begin[begin]) {\n\t\t\t\t\tlet value = deparsed.begin[begin][key];\n\t\t\t\t\tif (!deparsed.begin[begin].hasOwnProperty(key)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Arrays need special treatment, all others are simple.\n\t\t\t\t\tif (begin !== \"array\") {\n\t\t\t\t\t\tsource.push(`! ${begin} ${key} = ${value}`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Array elements need to be joined by either spaces or pipes.\n\t\t\t\t\t\tlet pipes = \" \";\n\t\t\t\t\t\tfor (let k = 0, len1 = value.length; k < len1; k++) {\n\t\t\t\t\t\t\tlet test = value[k];\n\t\t\t\t\t\t\tif (test.match(/\\s+/)) {\n\t\t\t\t\t\t\t\tpipes = \"|\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsource.push(`! ${begin} ${key} = ` + value.join(pipes));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsource.push(\"\");\n\t\t\t}\n\t\t}\n\n\t\t// Do objects. Requires stripping out the actual function wrapper\n\t\tif (deparsed.objects) {\n\t\t\tfor (let lang in deparsed.objects) {\n\t\t\t\tif (deparsed.objects[lang] && deparsed.objects[lang]._objects) {\n\t\t\t\t\tfor (let func in deparsed.objects[lang]._objects) {\n\t\t\t\t\t\tsource.push(\"> object \" + func + \" \" + lang);\n\t\t\t\t\t\tsource.push(deparsed.objects[lang]._objects[func].toString().match(/function[^{]+\\{\\n*([\\s\\S]*)\\}\\;?\\s*$/m)[1].trim().split(\"\\n\").map(function(ln) {\n\t\t\t\t\t\t\treturn \"\\t\" + ln;\n\t\t\t\t\t\t}).join(\"\\n\"));\n\t\t\t\t\t\tsource.push(\"< object\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (deparsed.begin.triggers && deparsed.begin.triggers.length > 0) {\n\t\t\tsource.push(\"> begin\\n\");\n\t\t\tsource.push.apply(source, _writeTriggers(deparsed.begin.triggers, \"indent\"));\n\t\t\tsource.push(\"< begin\\n\");\n\t\t}\n\n\t\t// Do the topics. Random first!\n\t\tlet topics = Object.keys(deparsed.topics).sort(function(a, b) {\n\t\t\treturn a - b;\n\t\t});\n\t\ttopics.unshift(\"random\");\n\t\tlet doneRandom = false;\n\t\tfor (let l = 0, len2 = topics.length; l < len2; l++) {\n\t\t\tlet topic = topics[l];\n\t\t\tif (!deparsed.topics.hasOwnProperty(topic)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (topic === \"random\" && doneRandom) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (topic === \"random\") {\n\t\t\t\tdoneRandom = 1;\n\t\t\t}\n\n\t\t\tlet tagged = false; // Use `> topic` tag; not for random, usually\n\t\t\tlet tagline = [];\n\t\t\tif (topic !== \"random\" || (Object.keys(deparsed.inherits[topic]).length > 0 || Object.keys(deparsed.includes[topic]).length > 0)) {\n\t\t\t\t// Topics other than \"random\" are *always* tagged. Otherwise (for random)\n\t\t\t\t// it's only tagged if it's found to have includes or inherits. But we\n\t\t\t\t// wait to see if this is the case because those things are kept in JS\n\t\t\t\t// objects and third party JS libraries like to inject junk into the root\n\t\t\t\t// Object prototype...\n\t\t\t\tif (topic !== \"random\") {\n\t\t\t\t\ttagged = true;\n\t\t\t\t}\n\n\t\t\t\t// Start building the tag line.\n\t\t\t\tlet inherits = [];\n\t\t\t\tlet includes = [];\n\t\t\t\tfor (let i in deparsed.inherits[topic]) {\n\t\t\t\t\tif (!deparsed.inherits[topic].hasOwnProperty(i)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tinherits.push(i);\n\t\t\t\t}\n\t\t\t\tfor (let i in deparsed.includes[topic]) {\n\t\t\t\t\tif (!deparsed.includes[topic].hasOwnProperty(i)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tincludes.push(i);\n\t\t\t\t}\n\t\t\t\tif (includes.length > 0) {\n\t\t\t\t\tincludes.unshift(\"includes\");\n\t\t\t\t\ttagline.push.apply(tagline, includes);\n\t\t\t\t\ttagged = true;\n\t\t\t\t}\n\t\t\t\tif (inherits.length > 0) {\n\t\t\t\t\tinherits.unshift(\"inherits\");\n\t\t\t\t\ttagline.push.apply(tagline, inherits);\n\t\t\t\t\ttagged = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tagged) {\n\t\t\t\tsource.push((`> topic ${topic} ` + tagline.join(\" \")).trim() + \"\\n\");\n\t\t\t}\n\n\t\t\tsource.push.apply(source, _writeTriggers(deparsed.topics[topic], tagged));\n\n\t\t\tif (tagged) {\n\t\t\t\tsource.push(\"< topic\\n\");\n\t\t\t}\n\t\t}\n\t\treturn source.join(\"\\n\");\n\t}\n\n\t/**\n\tstring checkSyntax (char command, string line)\n\n\tCheck the syntax of a RiveScript command. `command` is the single character\n\tcommand symbol, and `line` is the rest of the line after the command.\n\n\tReturns an empty string on success, or a description of the error on error.\n\t*/\n\tcheckSyntax(cmd, line) {\n\t\tvar self = this;\n\n\t\t// Run syntax tests based on the command used.\n\t\tif (cmd === \"!\") {\n\t\t\t// ! Definition\n\t\t\t// - Must be formatted like this:\n\t\t\t//   ! type name = value\n\t\t\t//   OR\n\t\t\t//   ! type = value\n\t\t\tif (!line.match(/^.+(?:\\s+.+|)\\s*=\\s*.+?$/)) {\n\t\t\t\treturn \"Invalid format for !Definition line: must be '! type name = value' OR '! type = value'\";\n\t\t\t} else if (line.match(/^array/)) {\n\t\t\t\tif (line.match(/\\=\\s?\\||\\|\\s?$/)) {\n\t\t\t\t\treturn \"Piped arrays can't begin or end with a |\";\n\t\t\t\t} else if (line.match(/\\|\\|/)) {\n\t\t\t\t\treturn \"Piped arrays can't include blank entries\";\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (cmd === \">\") {\n\t\t\t// > Label\n\t\t\t// - The \"begin\" label must have only one argument (\"begin\")\n\t\t\t// - The \"topic\" label must be lowercased but can inherit other topics\n\t\t\t// - The \"object\" label must follow the same rules as \"topic\", but don't\n\t\t\t//   need to be lowercased.\n\t\t\tlet parts = line.split(/\\s+/);\n\t\t\tif (parts[0] === \"begin\" && parts.length > 1) {\n\t\t\t\treturn \"The 'begin' label takes no additional arguments\";\n\t\t\t} else if (parts[0] === \"topic\") {\n\t\t\t\tif (!self.master._forceCase && line.match(/[^a-z0-9_\\-\\s]/)) {\n\t\t\t\t\treturn \"Topics should be lowercased and contain only letters and numbers\";\n\t\t\t\t} else if (line.match(/[^A-Za-z0-9_\\-\\s]/)) {\n\t\t\t\t\treturn \"Topics should contain only letters and numbers in forceCase mode\";\n\t\t\t\t}\n\t\t\t} else if (parts[0] === \"object\") {\n\t\t\t\tif (line.match(/[^A-Za-z0-9_\\-\\s]/)) {\n\t\t\t\t\treturn \"Objects can only contain numbers and letters\";\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (cmd === \"+\" || cmd === \"%\" || cmd === \"@\") {\n\t\t\t// + Trigger, % Previous, @ Redirect\n\t\t\t// This one is strict. The triggers are to be run through the regexp\n\t\t\t// engine, therefore it should be acceptable for the regexp engine.\n\t\t\t// - Entirely lowercase\n\t\t\t// - No symbols except: ( | ) [ ] * _ # { } < > =\n\t\t\t// - All brackets should be matched.\n\t\t\tlet parens = 0,\n\t\t\t\tsquare = 0,\n\t\t\t\tcurly = 0,\n\t\t\t\tangle = 0;\n\n\t\t\t// Look for obvious errors first.\n\t\t\tif (self.utf8) {\n\t\t\t\t// In UTF-8 mode, most symbols are allowed.\n\t\t\t\tif (line.match(/[A-Z\\\\.]/)) {\n\t\t\t\t\treturn \"Triggers can't contain uppercase letters, backslashes or dots in UTF-8 mode\";\n\t\t\t\t}\n\t\t\t} else if (line.match(/[^a-z0-9(|)\\[\\]*_#@{}<>=\\/\\s]/)) {\n\t\t\t\treturn \"Triggers may only contain lowercase letters, numbers, and these symbols: ( | ) [ ] * _ # { } < > = /\";\n\t\t\t} else if (line.match(/\\(\\||\\|\\)/)) {\n\t\t\t\treturn \"Piped alternations can't begin or end with a |\";\n\t\t\t} else if (line.match(/\\([^\\)].+\\|\\|.+\\)/)) {\n\t\t\t\treturn \"Piped alternations can't include blank entries\";\n\t\t\t} else if (line.match(/\\[\\||\\|\\]/)) {\n\t\t\t\treturn \"Piped optionals can't begin or end with a |\";\n\t\t\t} else if (line.match(/\\[[^\\]].+\\|\\|.+\\]/)) {\n\t\t\t\treturn \"Piped optionals can't include blank entries\";\n\t\t\t}\n\n\t\t\t// Count the brackets.\n\t\t\tlet chars = line.split(\"\");\n\t\t\tfor (let j = 0, len = chars.length; j < len; j++) {\n\t\t\t\tlet char = chars[j];\n\t\t\t\tswitch (char) {\n\t\t\t\t\tcase \"(\":\n\t\t\t\t\t\tparens++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \")\":\n\t\t\t\t\t\tparens--;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"[\":\n\t\t\t\t\t\tsquare++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"]\":\n\t\t\t\t\t\tsquare--;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"{\":\n\t\t\t\t\t\tcurly++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"}\":\n\t\t\t\t\t\tcurly--;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"<\":\n\t\t\t\t\t\tangle++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \">\":\n\t\t\t\t\t\tangle--;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Any mismatches?\n\t\t\tif (parens !== 0) {\n\t\t\t\treturn \"Unmatched parenthesis brackets\";\n\t\t\t}\n\t\t\tif (square !== 0) {\n\t\t\t\treturn \"Unmatched square brackets\";\n\t\t\t}\n\t\t\tif (curly !== 0) {\n\t\t\t\treturn \"Unmatched curly brackets\";\n\t\t\t}\n\t\t\tif (angle !== 0) {\n\t\t\t\treturn \"Unmatched angle brackets\";\n\t\t\t}\n\t\t} else if (cmd === \"*\") {\n\t\t\t// * Condition\n\t\t\t// Syntax for a conditional is as follows:\n\t\t\t// * value symbol value => response\n\t\t\tif (!line.match(/^.+?\\s*(?:==|eq|!=|ne|<>|<|<=|>|>=)\\s*.+?=>.+?$/)) {\n\t\t\t\treturn \"Invalid format for !Condition: should be like '* value symbol value => response'\";\n\t\t\t}\n\t\t}\n\n\t\t// No problems!\n\t\treturn \"\";\n\t}\n\n\t/**\n\tprivate void initTopic (object topics, string name)\n\n\tInitialize the topic tree for the parsing phase. Sets up the topic under\n\tast.topics with all its relevant keys and sub-keys, etc.\n\t*/\n\tinitTopic(topics, name) {\n\t\tvar self = this;\n\t\tif (topics[name] === undefined) {\n\t\t\ttopics[name] = {\n\t\t\t\tincludes: {},\n\t\t\t\tinherits: {},\n\t\t\t\ttriggers: []\n\t\t\t};\n\t\t}\n\t}\n\n};\n\nmodule.exports = Parser;\n", "// RiveScript.js\n// https://www.rivescript.com/\n\n// This code is released under the MIT License.\n// See the \"LICENSE\" file for more information.\n\n\"use strict\";\n\n/**\nTopic inheritance functions.\n\nThese are helper functions to assist with topic inheritance and includes.\n*/\n\n/**\nstring[] getTopicTriggers (RiveScript rs, string topic, object triglvl,\nint depth, int inheritance, int inherited)\n\nRecursively scan through a topic and retrieve a listing of all triggers in\nthat topic and in all included/inherited topics. Some triggers will come out\nwith an {inherits} tag to signify inheritance depth.\n\n* topic: The name of the topic\n* thats: Boolean, are we getting replies with %Previous or not?\n* triglvl: reference to this._topics or this._thats\n* depth: recursion depth counter\n\nEach \"trigger\" returned from this function is actually an array, where index\n0 is the trigger text and index 1 is the pointer to the trigger's data within\nthe original topic structure.\n*/\nconst getTopicTriggers = function(rs, topic, thats, depth, inheritance, inherited) {\n\tvar self = this;\n\n\t// Initialize default triggers.\n\tif (thats == null) {\n\t\tthats = false;\n\t}\n\tif (depth == null) {\n\t\tdepth = 0;\n\t}\n\tif (inheritance == null) {\n\t\tinheritance = 0;\n\t}\n\tif (inherited == null) {\n\t\tinherited = 0;\n\t}\n\n\t// Break if we're in too deep.\n\tif (depth > rs._depth) {\n\t\trs.warn(`Deep recursion while scanning topic inheritance (gave up in topic ${topic})!`);\n\t\treturn [];\n\t}\n\n\t// Keep in mind here that there is a difference between 'includes' and\n\t// 'inherits' -- topics that inherit other topics are able to OVERRIDE\n\t// triggers that appear in the inherited topic. This means that if the top\n\t// topic has a trigger of simply '*', then NO triggers are capable of\n\t// matching in ANY inherited topic, because even though * has the lowest\n\t// priority, it has an automatic priority over all inherited topics.\n\n\t// The getTopicTriggers method takes this into account. All topics that\n\t// inherit other topics will have their triggers prefixed with a fictional\n\t// {inherits} tag, which would start at {inherits=0} and increment if this\n\t// topic has other inheriting topics. So we can use this tag to make sure\n\t// topics that inherit things will have their triggers always be on top of\n\t// the stack, from inherits=0 to inherits=n.\n\n\t// Important info about the depth vs. inheritance params to this function:\n\t// depth increments by 1 each time this function recursively calls itself.\n\t// inheritance increments by 1 only when this topic inherits another topic.\n\n\t// This way, '> topic alpha includes beta inherits gamma' will have this\n\t// effect:\n\t//  alpha and beta's triggers are combined together into one matching pool,\n\t//  and then those triggers have higher priority than gamma's.\n\n\t// The inherited option is true if this is a recursive call, from a topic\n\t// that inherits other topics. This forces the {inherits} tag to be added to\n\t// the triggers. This only applies when the top topic 'includes' another\n\t// topic.\n\n\trs.say(`Collecting trigger list for topic ${topic} (depth=${depth}; ` + `inheritance=${inheritance}; inherited=${inherited})`);\n\n\t// Topic doesn't exist?\n\tif (rs._topics[topic] == null) {\n\t\trs.warn(`Inherited or included topic '${topic}' doesn't exist or ` + \"has no triggers\");\n\t\treturn [];\n\t}\n\n\t// Collect an array of triggers to return.\n\tlet triggers = [];\n\n\t// Get those that exist in this topic directly.\n\tlet inThisTopic = [];\n\tif (!thats) {\n\t\t// The non-that structure is: {topics}->[ array of triggers ]\n\t\tif (rs._topics[topic] != null) {\n\t\t\tfor (let i = 0, len = rs._topics[topic].length; i < len; i++) {\n\t\t\t\tlet trigger = rs._topics[topic][i];\n\t\t\t\tinThisTopic.push([trigger.trigger, trigger]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// The 'that' structure is: {topic}->{cur trig}->{prev trig}->{trigger info}\n\t\tif (rs._thats[topic] != null) {\n\t\t\tfor (let curTrig in rs._thats[topic]) {\n\t\t\t\tif (!rs._thats[topic].hasOwnProperty(curTrig)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (let previous in rs._thats[topic][curTrig]) {\n\t\t\t\t\tif (!rs._thats[topic][curTrig].hasOwnProperty(previous)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tlet pointer = rs._thats[topic][curTrig][previous];\n\t\t\t\t\tinThisTopic.push([pointer.trigger, pointer]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Does this topic include others?\n\tif (Object.keys(rs._includes[topic]).length > 0) {\n\t\t// Check every included topic.\n\t\tfor (let includes in rs._includes[topic]) {\n\t\t\tif (!rs._includes[topic].hasOwnProperty(includes)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\trs.say(`Topic ${topic} includes ${includes}`);\n\t\t\ttriggers.push.apply(triggers, getTopicTriggers(rs, includes, thats, depth + 1, inheritance + 1, false));\n\t\t}\n\t}\n\n\t// Does this topic inherit others?\n\tif (Object.keys(rs._inherits[topic]).length > 0) {\n\t\t// Check every inherited topic\n\t\tfor (let inherits in rs._inherits[topic]) {\n\t\t\tif (!rs._inherits[topic].hasOwnProperty(inherits)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\trs.say(`Topic ${topic} inherits ${inherits}`);\n\t\t\ttriggers.push.apply(triggers, getTopicTriggers(rs, inherits, thats, depth + 1, inheritance + 1, true));\n\t\t}\n\t}\n\n\t// Collect the triggers for *this* topic. If this topic inherits any other\n\t// topics, it means that this topic's triggers have higher priority than\n\t// those in any inherited topics. Enforce this with an {inherits} tag.\n\tif (Object.keys(rs._inherits[topic]).length > 0 || inherited) {\n\t\tfor (let j = 0, len1 = inThisTopic.length; j < len1; j++) {\n\t\t\tlet trigger = inThisTopic[j];\n\n\t\t\trs.say(`Prefixing trigger with {inherits=${inheritance}} ${trigger}`);\n\t\t\ttriggers.push.apply(triggers, [[`{inherits=${inheritance}}${trigger[0]}`, trigger[1]]]);\n\t\t}\n\t} else {\n\t\ttriggers.push.apply(triggers, inThisTopic);\n\t}\n\treturn triggers;\n};\n\n/**\nstring[] getTopicTree (RiveScript rs, string topic, int depth)\n\nGiven a topic, this returns an array of every topic related to it (all the\ntopics it includes or inherits, plus all the topics included or inherited\nby those topics, and so on). The array includes the original topic, too.\n*/\nconst getTopicTree = function(rs, topic, depth) {\n\tvar self = this;\n\n\t// Default depth\n\tif (depth == null) {\n\t\tdepth = 0;\n\t}\n\n\t// Break if we're in too deep.\n\tif (depth > rs._depth) {\n\t\trs.warn(\"Deep recursion while scanning topic tree!\");\n\t\treturn [];\n\t}\n\n\t// Collect an array of all topics.\n\tlet topics = [topic];\n\tfor (let includes in rs._topics[topic].includes) {\n\t\tif (!rs._topics[topic].includes.hasOwnProperty(includes)) {\n\t\t\tcontinue;\n\t\t}\n\t\ttopics.push.apply(topics, getTopicTree(rs, includes, depth + 1));\n\t}\n\tfor (let inherits in rs._topics[topic].inherits) {\n\t\tif (!rs._topics[topic].inherits.hasOwnProperty(inherits)) {\n\t\t\tcontinue;\n\t\t}\n\t\ttopics.push.apply(topics, getTopicTree(rs, inherits, depth + 1));\n\t}\n\n\treturn topics;\n};\n\nexports.getTopicTriggers = getTopicTriggers;\nexports.getTopicTree = getTopicTree;\n", "// RiveScript.js\n// https://www.rivescript.com/\n\n// This code is released under the MIT License.\n// See the \"LICENSE\" file for more information.\n\n// Brain logic for RiveScript\n\n\"use strict\";\n\nconst utils = require(\"./utils\");\nconst inherit_utils = require(\"./inheritance\");\n\nconst tags = {\n\t'bot': {\n\t\tselfClosing: true, handle: async (rive, data, user, scope) => {\n\t\t\tlet split = data.split(\"=\");\n\n\t\t\tif (split.length > 1) {\n\t\t\t\trive._var[split[0].trim()] = split[1];\n\t\t\t\treturn \"\";\n\t\t\t} else if (split.length === 1) {\n\t\t\t\tlet val = rive._var[split[0].trim()];\n\t\t\t\tif (val === undefined) val = \"undefined\";\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn \"undefined\";\n\t\t\t}\n\t\t}\n\t},\n\t'env': {\n\t\tselfClosing: true, handle: async (rive, data, user, scope) => {\n\t\t\tlet split = data.split(\"=\");\n\n\t\t\tif (split.length > 1) {\n\t\t\t\trive._global[split[0].trim()] = split[1];\n\t\t\t\treturn \"\";\n\t\t\t} else if (split.length === 1) {\n\t\t\t\tlet val = rive._global[split[0].trim()];\n\t\t\t\tif (val === undefined) val = \"undefined\";\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn \"undefined\";\n\t\t\t}\n\t\t}\n\t},\n\t'set': {\n\t\tselfClosing: true, handle: async (rive, data, user, scope) => {\n\t\t\tlet split = data.split(\"=\");\n\t\t\tawait rive.setUservar(user, split[0].trim(), split[1]);\n\t\t\treturn \"\";\n\t\t}\n\t},\n\t'get': {\n\t\tselfClosing: true, handle: async (rive, data, user, scope) => {\n\t\t\tlet result = await rive.getUservar(user, data.trim());\n\t\t\treturn result;\n\t\t}\n\t},\n\t'add': {\n\t\tselfClosing: true, handle: async (rive, data, user, scope) => {\n\t\t\tlet split = data.split(\"=\");\n\t\t\tlet name = split[0].trim();\n\t\t\tlet existingValue = await rive.getUservar(user, name) || 0;\n\t\t\tif (existingValue === 'undefined') existingValue = 0;\n\t\t\tlet value = parseInt(split[1].trim());\n\t\t\tlet existingNumber = parseInt(existingValue);\n\t\t\tif (isNaN(value)) {\n\t\t\t\treturn `[ERR: Math can't 'add' non-numeric value '${value}']`;\n\t\t\t} else if (isNaN(existingNumber)) {\n\t\t\t\treturn `[ERR: Math can't 'add' non-numeric user variable '${name}']`;\n\t\t\t} else {\n\t\t\t\tlet result = Number(existingNumber + value);\n\t\t\t\tawait rive.setUservar(user, name, result);\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t},\n\t'sub': {\n\t\tselfClosing: true, handle: async (rive, data, user, scope) => {\n\t\t\tlet split = data.split(\"=\");\n\t\t\tlet name = split[0].trim();\n\t\t\tlet existingValue = await rive.getUservar(user, name) || 0;\n\t\t\tlet value = parseInt(split[1].trim());\n\t\t\tif (existingValue === 'undefined') existingValue = 0;\n\t\t\tlet existingNumber = parseInt(existingValue);\n\t\t\tif (isNaN(value)) {\n\t\t\t\treturn `[ERR: Math can't 'sub' non-numeric value '${value}']`;\n\t\t\t} else if (isNaN(existingNumber)) {\n\t\t\t\treturn `[ERR: Math can't 'sub' non-numeric user variable '${name}']`;\n\t\t\t} else {\n\t\t\t\tlet result = Number(existingNumber - value);\n\t\t\t\tawait rive.setUservar(user, name, result);\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t},\n\t'mult': {\n\t\tselfClosing: true, handle: async (rive, data, user, scope) => {\n\t\t\tlet split = data.split(\"=\");\n\t\t\tlet name = split[0].trim();\n\t\t\tlet existingValue = await rive.getUservar(user, name) || 0;\n\t\t\tlet value = parseInt(split[1].trim());\n\t\t\tif (existingValue === 'undefined') existingValue = 0;\n\t\t\tlet existingNumber = parseInt(existingValue);\n\t\t\tif (isNaN(value)) {\n\t\t\t\treturn `[ERR: Math can't 'mult' non-numeric value '${value}']`;\n\t\t\t} else if (isNaN(existingNumber)) {\n\t\t\t\treturn `[ERR: Math can't 'mult' non-numeric user variable '${name}']`;\n\t\t\t} else {\n\t\t\t\tlet result = Number(existingNumber * value);\n\t\t\t\tawait rive.setUservar(user, name, result);\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t},\n\t'div': {\n\t\tselfClosing: true, handle: async (rive, data, user, scope) => {\n\t\t\tlet split = data.split(\"=\");\n\t\t\tlet name = split[0].trim();\n\t\t\tlet existingValue = await rive.getUservar(user, name) || 0;\n\t\t\tlet value = parseInt(split[1].trim());\n\t\t\tif (existingValue === 'undefined') existingValue = 0;\n\t\t\tlet existingNumber = parseInt(existingValue);\n\t\t\tif (isNaN(value)) {\n\t\t\t\treturn `[ERR: Math can't 'div' non-numeric value '${value}']`;\n\t\t\t} else if (isNaN(existingNumber)) {\n\t\t\t\treturn `[ERR: Math can't 'div' non-numeric user variable '${name}']`;\n\t\t\t} else if (value === 0) {\n\t\t\t\treturn `[ERR: Can't Divide By Zero]`;\n\t\t\t} else {\n\t\t\t\tlet result = Number(existingNumber / value);\n\t\t\t\tawait rive.setUservar(user, name, result);\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t},\n\t'call': {\n\t\tselfClosing: false, handle: async (rive, data, user, scope) => {\n\t\t\tlet parts = utils.trim(data).split(\" \");\n\t\t\tlet output = rive.errors.objectNotFound;\n\t\t\tlet obj = parts[0];\n\n\t\t\tlet args = [];\n\t\t\tif (parts.length > 1) {\n\t\t\t\targs = utils.parseCallArgs(parts.slice(1).join(\" \"));\n\t\t\t}\n\n\t\t\tif (obj in rive._objlangs) {\n\t\t\t\t// We do, but do we have a handler for that language?\n\t\t\t\tlet lang = rive._objlangs[obj];\n\t\t\t\tif (lang in rive._handlers) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// We do.\n\t\t\t\t\t\toutput = (await rive._handlers[lang].call(rive, obj, args, scope));\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (error != undefined) {\n\t\t\t\t\t\t\trive.brain.warn(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t\toutput = `[ERR: Error raised by object macro: ${error.message}]`;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\toutput = \"[ERR: No Object Handler]\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\t},\n};\n\n/**\nBrain (RiveScript master)\n\nCreate a Brain object which handles the actual process of fetching a reply.\n*/\nclass Brain {\n\tconstructor(master) {\n\t\tvar self = this;\n\n\t\tself.master = master;\n\t\tself.strict = master._strict;\n\t\tself.utf8 = master._utf8;\n\n\t\t// Private variables only relevant to the reply-answering part of RiveScript.\n\t\tself._currentUser = null; // The current user asking for a message\n\t}\n\n\t// Proxy functions\n\tsay(message) {\n\t\treturn this.master.say(message);\n\t}\n\twarn(message, filename, lineno) {\n\t\treturn this.master.warn(message, filename, lineno);\n\t}\n\n\t/**\n\tasync reply (string user, string msg[, scope])\n\n\tFetch a reply for the user. This returns a Promise that may be awaited on.\n\t*/\n\tasync reply(user, msg, scope) {\n\t\tvar self = this;\n\n\t\tself.say(`Asked to reply to [${user}] ${msg}`);\n\n\t\t// Store the current user's ID.\n\t\tself._currentUser = user;\n\n\t\t// Format their message.\n\t\tmsg = self.formatMessage(msg);\n\t\tlet reply = \"\";\n\n\t\t// Set initial match to be undefined\n\t\tawait self.master._session.set(user, {\n\t\t\t__initialmatch__: null\n\t\t});\n\n\t\t// If the BEGIN block exists, consult it first.\n\t\tif (self.master._topics.__begin__) {\n\t\t\tlet begin = (await self._getReply(user, \"request\", \"begin\", 0, scope));\n\n\t\t\t// OK to continue?\n\t\t\tif (begin.indexOf(\"{ok}\") > -1) {\n\t\t\t\treply = (await self._getReply(user, msg, \"normal\", 0, scope));\n\t\t\t\tbegin = begin.replace(/\\{ok\\}/g, reply);\n\t\t\t}\n\n\t\t\treply = (await self.processTags(user, msg, begin, [], [], 0, scope));\n\t\t} else {\n\t\t\treply = (await self._getReply(user, msg, \"normal\", 0, scope));\n\t\t}\n\n\t\t// Save their reply history\n\t\tlet history = (await self.master._session.get(user, \"__history__\"));\n\t\tif (history == \"undefined\") { // purposeful typecast\n\t\t\thistory = newHistory();\n\t\t}\n\t\ttry {\n\t\t\t// If modifying it fails, the data was bad, and reset it.\n\t\t\thistory.input.pop();\n\t\t\thistory.input.unshift(msg);\n\t\t\thistory.reply.pop();\n\t\t\thistory.reply.unshift(reply);\n\t\t} catch (e) {\n\t\t\thistory = newHistory();\n\t\t}\n\t\tawait self.master._session.set(user, {\n\t\t\t__history__: history\n\t\t});\n\n\t\t// Unset the current user ID.\n\t\tself._currentUser = null;\n\n\t\treturn reply;\n\t}\n\n\t/**\n\tasync _getReply (string user, string msg, string context, int step, scope)\n\n\tThe internal reply method. DO NOT CALL THIS DIRECTLY.\n\n\t* user, msg and scope are the same as reply()\n\t* context = \"normal\" or \"begin\"\n\t* step = the recursion depth\n\t* scope = the call scope for object macros\n\t*/\n\tasync _getReply(user, msg, context, step, scope) {\n\t\tvar self = this;\n\n\t\t// Needed to sort replies?\n\t\tif (!self.master._sorted.topics) {\n\t\t\tself.warn(\"You forgot to call sortReplies()!\");\n\t\t\treturn \"ERR: Replies Not Sorted\";\n\t\t}\n\n\t\t// Collect data on this user.\n\t\tlet topic = (await self.master.getUservar(user, \"topic\"));\n\t\tif (topic === null || topic === \"undefined\") {\n\t\t\ttopic = \"random\";\n\t\t}\n\n\t\tlet stars = [];\n\t\tlet thatstars = []; // For %Previous\n\t\tlet reply = \"\";\n\n\t\t// Avoid letting them fall into a missing topic.\n\t\tif (!self.master._topics[topic]) {\n\t\t\tself.warn(`User ${user} was in an empty topic named '${topic}'`);\n\t\t\ttopic = \"random\";\n\t\t\tawait self.master.setUservar(user, \"topic\", topic);\n\t\t}\n\n\t\t// Avoid deep recursion.\n\t\tif (step > self.master._depth) {\n\t\t\treturn self.master.errors.deepRecursion;\n\t\t}\n\n\t\t// Are we in the BEGIN block?\n\t\tif (context === \"begin\") {\n\t\t\ttopic = \"__begin__\";\n\t\t}\n\n\t\t// Initialize this user's history.\n\t\tlet history = (await self.master._session.get(user, \"__history__\"));\n\t\tif (history == \"undefined\") { // purposeful typecast\n\t\t\thistory = newHistory();\n\t\t\tawait self.master._session.set(user, {\n\t\t\t\t__history__: history\n\t\t\t});\n\t\t}\n\n\t\t// More topic sanity checking.\n\t\tif (!self.master._topics[topic]) {\n\t\t\t// This was handled before, which would mean topic=random and it doesn't\n\t\t\t// exist. Serious issue!\n\t\t\treturn \"ERR: No default topic 'random' was found!\";\n\t\t}\n\n\t\t// Create a pointer for the matched data when we find it.\n\t\tlet matched = null;\n\t\tlet matchedTrigger = null;\n\t\tlet foundMatch = false;\n\n\t\t// See if there were any %Previous's in this topic, or any topic related\n\t\t// to it. This should only be done the first time -- not during a recursive\n\t\t// redirection. This is because in a redirection, \"lastreply\" is still gonna\n\t\t// be the same as it was the first time, resulting in an infinite loop!\n\t\tif (step === 0) {\n\t\t\tlet allTopics = [topic];\n\t\t\tif (self.master._topics[topic].includes || self.master._topics[topic].inherits) {\n\t\t\t\t// Get ALL the topics!\n\t\t\t\tallTopics = inherit_utils.getTopicTree(self.master, topic);\n\t\t\t}\n\n\t\t\t// Scan them all.\n\t\t\tfor (let j = 0, len = allTopics.length; j < len; j++) {\n\t\t\t\tlet top = allTopics[j];\n\t\t\t\tself.say(`Checking topic ${top} for any %Previous's`);\n\t\t\t\tif (self.master._sorted.thats[top].length) {\n\t\t\t\t\t// There's one here!\n\t\t\t\t\tself.say(\"There's a %Previous in this topic!\");\n\n\t\t\t\t\t// Do we have history yet?\n\t\t\t\t\tlet lastReply = history.reply ? history.reply[0] : \"undefined\";\n\n\t\t\t\t\t// Format the bot's last reply the same way as the human's.\n\t\t\t\t\tlastReply = self.formatMessage(lastReply, true);\n\t\t\t\t\tself.say(`Last reply: ${lastReply}`);\n\n\t\t\t\t\t// See if it's a match\n\t\t\t\t\tfor (let k = 0, len1 = self.master._sorted.thats[top].length; k < len1; k++) {\n\t\t\t\t\t\tlet trig = self.master._sorted.thats[top][k];\n\t\t\t\t\t\tlet pattern = trig[1].previous;\n\t\t\t\t\t\tlet botside = (await self.triggerRegexp(user, pattern));\n\n\t\t\t\t\t\tself.say(`Try to match lastReply (${lastReply}) to ${botside}`);\n\n\t\t\t\t\t\t// Match?\n\t\t\t\t\t\tlet match = lastReply.match(new RegExp(`^${botside}$`), 'i');\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\t// Huzzah! See if OUR message is right too.\n\t\t\t\t\t\t\tself.say(\"Bot side matched!\");\n\n\t\t\t\t\t\t\tthatstars = match; // Collect the bot stars in case we need them\n\t\t\t\t\t\t\tthatstars.shift();\n\n\t\t\t\t\t\t\t// Compare the triggers to the user's message.\n\t\t\t\t\t\t\tlet userSide = trig[1];\n\t\t\t\t\t\t\tlet regexp = (await self.triggerRegexp(user, userSide.trigger));\n\t\t\t\t\t\t\tself.say(`Try to match \"${msg}\" against ${userSide.trigger} (${regexp})`);\n\n\t\t\t\t\t\t\t// If the trigger is atomic, we don't need to bother with the regexp engine.\n\t\t\t\t\t\t\tlet isAtomic = utils.isAtomic(userSide.trigger);\n\t\t\t\t\t\t\tlet isMatch = false;\n\t\t\t\t\t\t\tif (isAtomic) {\n\t\t\t\t\t\t\t\tif (msg === regexp) {\n\t\t\t\t\t\t\t\t\tisMatch = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlet match = msg.match(new RegExp(`^${regexp}$`));\n\t\t\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\t\t\tisMatch = true;\n\t\t\t\t\t\t\t\t\t// Get the stars\n\t\t\t\t\t\t\t\t\tstars = match;\n\t\t\t\t\t\t\t\t\tif (stars.length >= 1) {\n\t\t\t\t\t\t\t\t\t\tstars.shift();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Was it a match?\n\t\t\t\t\t\t\tif (isMatch) {\n\t\t\t\t\t\t\t\t// Keep the trigger pointer.\n\t\t\t\t\t\t\t\tmatched = userSide;\n\t\t\t\t\t\t\t\tfoundMatch = true;\n\t\t\t\t\t\t\t\tmatchedTrigger = userSide.trigger;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tself.say(\"No %Previous in this topic!\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Search their topic for a match to their trigger.\n\t\tif (!foundMatch) {\n\t\t\tself.say(\"Searching their topic for a match...\");\n\t\t\tfor (let l = 0, len = self.master._sorted.topics[topic].length; l < len; l++) {\n\t\t\t\tlet trig = self.master._sorted.topics[topic][l];\n\t\t\t\tlet pattern = trig[0];\n\t\t\t\tlet regexp = (await self.triggerRegexp(user, pattern));\n\n\t\t\t\tself.say(`Try to match \"${msg}\" against ${pattern} (${regexp})`);\n\n\t\t\t\t// If the trigger is atomic, we don't need to bother with the regexp engine.\n\t\t\t\tlet isAtomic = utils.isAtomic(pattern);\n\t\t\t\tlet isMatch = false;\n\t\t\t\tif (isAtomic) {\n\t\t\t\t\tif (msg === regexp) {\n\t\t\t\t\t\tisMatch = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Non-atomic triggers always need the regexp.\n\t\t\t\t\tlet match = msg.match(new RegExp(`^${regexp}$`, 'i'));\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\t// The regexp matched!\n\t\t\t\t\t\tisMatch = true;\n\n\t\t\t\t\t\t// Collect the stars\n\t\t\t\t\t\tstars = [];\n\t\t\t\t\t\tif (match.length > 1) {\n\t\t\t\t\t\t\tfor (let i = 1, len = match.length; i < len; i++) {\n\t\t\t\t\t\t\t\tstars.push(match[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// A match somehow?\n\t\t\t\tif (isMatch) {\n\t\t\t\t\tself.say(\"Found a match!\");\n\n\t\t\t\t\t// Keep the pointer to this trigger's data.\n\t\t\t\t\tmatched = trig[1];\n\t\t\t\t\tfoundMatch = true;\n\t\t\t\t\tmatchedTrigger = pattern;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Store what trigger they matched on. If their matched trigger is undefined,\n\t\t// this will be too, which is great.\n\t\tawait self.master._session.set(user, { __lastmatch__: matchedTrigger });\n\t\tlet lastTriggers = [];\n\t\tif (step === 0) {\n\t\t\tawait self.master._session.set(user, {\n\t\t\t\t// Store initial matched trigger. Like __lastmatch__, this can be undefined.\n\t\t\t\t__initialmatch__: matchedTrigger,\n\n\t\t\t\t// Also initialize __last_triggers__ which will keep all matched triggers\n\t\t\t\t__last_triggers__: lastTriggers\n\t\t\t});\n\t\t}\n\n\t\t// Did we match?\n\t\tif (matched) {\n\t\t\t// Keep the current match\n\t\t\tlastTriggers.push(matched);\n\t\t\tawait self.master._session.set(user, { __last_triggers__: lastTriggers });\n\n\t\t\t// A single loop so we can break out early\n\t\t\tfor (let n = 0; n < 1; n++) {\n\t\t\t\t// See if there are any hard redirects.\n\t\t\t\tif (matched.redirect != null) {\n\t\t\t\t\tself.say(`Redirecting us to ${matched.redirect}`);\n\t\t\t\t\tlet redirect = (await self.processTags(user, msg, matched.redirect, stars, thatstars, step, scope));\n\n\t\t\t\t\tself.say(`Pretend user said: ${redirect}`);\n\t\t\t\t\treply = (await self._getReply(user, redirect, context, step + 1, scope));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Check the conditionals.\n\t\t\t\tfor (let o = 0, len4 = matched.condition.length; o < len4; o++) {\n\t\t\t\t\tlet row = matched.condition[o];\n\t\t\t\t\tlet halves = row.split(/\\s*=>\\s*/);\n\t\t\t\t\tif (halves && halves.length === 2) {\n\t\t\t\t\t\tlet condition = halves[0].match(/^(.+?)\\s+(==|eq|!=|ne|<>|<|<=|>|>=)\\s+(.*?)$/);\n\t\t\t\t\t\tif (condition) {\n\t\t\t\t\t\t\tlet left = utils.strip(condition[1]);\n\t\t\t\t\t\t\tlet eq = condition[2];\n\t\t\t\t\t\t\tlet right = utils.strip(condition[3]);\n\t\t\t\t\t\t\tlet potreply = halves[1].trim();\n\n\t\t\t\t\t\t\t// Process tags all around\n\t\t\t\t\t\t\tleft = (await self.processTags(user, msg, left, stars, thatstars, step, scope));\n\t\t\t\t\t\t\tright = (await self.processTags(user, msg, right, stars, thatstars, step, scope));\n\n\t\t\t\t\t\t\t// Defaults?\n\t\t\t\t\t\t\tif (left.length === 0) {\n\t\t\t\t\t\t\t\tleft = \"undefined\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (right.length === 0) {\n\t\t\t\t\t\t\t\tright = \"undefined\";\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tself.say(`Check if ${left} ${eq} ${right}`);\n\n\t\t\t\t\t\t\t// Validate it\n\t\t\t\t\t\t\tlet passed = false;\n\t\t\t\t\t\t\tif (eq === \"eq\" || eq === \"==\") {\n\t\t\t\t\t\t\t\tif (left === right) {\n\t\t\t\t\t\t\t\t\tpassed = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (eq === \"ne\" || eq === \"!=\" || eq === \"<>\") {\n\t\t\t\t\t\t\t\tif (left !== right) {\n\t\t\t\t\t\t\t\t\tpassed = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t// Dealing with numbers here\n\t\t\t\t\t\t\t\t\tleft = parseInt(left);\n\t\t\t\t\t\t\t\t\tright = parseInt(right);\n\t\t\t\t\t\t\t\t\tif (eq === \"<\" && left < right) {\n\t\t\t\t\t\t\t\t\t\tpassed = true;\n\t\t\t\t\t\t\t\t\t} else if (eq === \"<=\" && left <= right) {\n\t\t\t\t\t\t\t\t\t\tpassed = true;\n\t\t\t\t\t\t\t\t\t} else if (eq === \">\" && left > right) {\n\t\t\t\t\t\t\t\t\t\tpassed = true;\n\t\t\t\t\t\t\t\t\t} else if (eq === \">=\" && left >= right) {\n\t\t\t\t\t\t\t\t\t\tpassed = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\te = error;\n\t\t\t\t\t\t\t\t\tself.warn(\"Failed to evaluate numeric condition!\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// OK?\n\t\t\t\t\t\t\tif (passed) {\n\t\t\t\t\t\t\t\treply = potreply;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Have our reply yet?\n\t\t\t\tif (reply !== null && reply.length > 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Process weights in the replies.\n\t\t\t\tlet bucket = [];\n\t\t\t\tfor (let q = 0, len5 = matched.reply.length; q < len5; q++) {\n\t\t\t\t\tlet rep = matched.reply[q];\n\t\t\t\t\tlet weight = 1;\n\t\t\t\t\tlet match = rep.match(/\\{weight=(\\d+?)\\}/i);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\tweight = match[1];\n\t\t\t\t\t\tif (weight <= 0) {\n\t\t\t\t\t\t\tself.warn(\"Can't have a weight <= 0!\");\n\t\t\t\t\t\t\tweight = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0; i < weight; i++) {\n\t\t\t\t\t\tbucket.push(rep);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Get a random reply.\n\t\t\t\tlet choice = parseInt(Math.random() * bucket.length);\n\t\t\t\treply = bucket[choice];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Still no reply?\n\t\tif (!foundMatch) {\n\t\t\treply = self.master.errors.replyNotMatched;\n\t\t} else if (reply === void 0 || reply.length === 0) {\n\t\t\treply = self.master.errors.replyNotFound;\n\t\t}\n\n\t\tself.say(`Reply: ${reply}`);\n\n\t\t// Process tags for the BEGIN block.\n\t\tif (context === \"begin\") {\n\t\t\t// The BEGIN block can set {topic} and user vars.\n\n\t\t\t// Topic setter\n\t\t\tlet match = reply.match(/\\{topic=(.+?)\\}/i);\n\t\t\tlet giveup = 0;\n\t\t\twhile (match) {\n\t\t\t\tgiveup++;\n\t\t\t\tif (giveup >= 50) {\n\t\t\t\t\tself.warn(\"Infinite loop looking for topic tag!\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet name = match[1];\n\t\t\t\tawait self.master.setUservar(user, \"topic\", name);\n\t\t\t\treply = reply.replace(new RegExp(\"{topic=\" + utils.quotemeta(name) + \"}\", \"ig\"), \"\");\n\t\t\t\tmatch = reply.match(/\\{topic=(.+?)\\}/i);\n\t\t\t}\n\n\t\t\t// Set user vars\n\t\t\tmatch = reply.match(/<set (.+?)=(.+?)>/i);\n\t\t\tgiveup = 0;\n\t\t\twhile (match) {\n\t\t\t\tgiveup++;\n\t\t\t\tif (giveup >= 50) {\n\t\t\t\t\tself.warn(\"Infinite loop looking for set tag!\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet name = match[1];\n\t\t\t\tlet value = match[2];\n\n\t\t\t\tawait self.master.setUservar(user, name, value);\n\t\t\t\treply = reply.replace(new RegExp(\"<set \" + utils.quotemeta(name) + \"=\" + utils.quotemeta(value) + \">\", \"ig\"), \"\");\n\t\t\t\tmatch = reply.match(/<set (.+?)=(.+?)>/i);\n\t\t\t}\n\t\t} else {\n\t\t\t// Process all the tags.\n\t\t\treply = self.processTags(user, msg, reply, stars, thatstars, step, scope);\n\t\t}\n\t\treturn reply;\n\t}\n\n\t/**\n\tstring formatMessage (string msg)\n\n\tFormat a user's message for safe processing.\n\t*/\n\tformatMessage(msg, botreply) {\n\t\tvar self = this;\n\n\t\t// Lowercase it.\n\t\tmsg = \"\" + msg;\n\t\tif (self.master._caseSensitive !== true) {\n\t\t\tmsg = msg.toLowerCase();\n\t\t}\n\n\t\t// Run substitutions and sanitize what's left.\n\t\tmsg = self.substitute(msg, \"sub\");\n\n\t\t// In UTF-8 mode, only strip metacharcters and HTML brackets (to protect\n\t\t// against obvious XSS attacks).\n\t\tif (self.utf8) {\n\t\t\tmsg = msg.replace(/[\\\\<>]+/, \"\");\n\n\t\t\tif (self.master.unicodePunctuation != null) {\n\t\t\t\tmsg = msg.replace(self.master.unicodePunctuation, \"\");\n\t\t\t}\n\n\t\t\t// For the bot's reply, also strip common punctuation.\n\t\t\tif (botreply != null) {\n\t\t\t\tmsg = msg.replace(/[.?,!;:@#$%^&*()]/, \"\");\n\t\t\t}\n\t\t} else {\n\t\t\t// For everything else, strip all non-alphanumerics\n\t\t\tmsg = utils.stripNasties(msg, self.utf8);\n\t\t}\n\n\t\t// cut leading and trailing blanks once punctuation dropped office\n\t\tmsg = msg.trim();\n\t\tmsg = msg.replace(/\\s+/g, \" \");\n\t\treturn msg;\n\t}\n\n\t/**\n\tasync triggerRegexp (string user, string trigger)\n\n\tPrepares a trigger for the regular expression engine.\n\t*/\n\tasync triggerRegexp(user, regexp) {\n\t\tvar self = this;\n\n\t\t// If the trigger is simply '*' then the * needs to become (.*?)\n\t\t// to match the blank string too.\n\t\tregexp = regexp.replace(/^\\*$/, \"<zerowidthstar>\");\n\n\t\t// Simple replacements.\n\t\tregexp = regexp.replace(/\\*/g, \"(.+?)\"); // Convert * into (.+?)\n\t\tregexp = regexp.replace(/#/g, \"(\\\\d+?)\"); // Convert # into (\\d+?)\n\t\tregexp = regexp.replace(/_/g, \"(\\\\w+?)\"); // Convert _ into (\\w+?)\n\t\tregexp = regexp.replace(/\\s*\\{weight=\\d+\\}\\s*/g, \"\"); // Remove {weight} tags\n\t\tregexp = regexp.replace(/<zerowidthstar>/g, \"(.*?)\");\n\t\tregexp = regexp.replace(/\\|{2,}/, '|'); // Remove empty entities\n\t\tregexp = regexp.replace(/(\\(|\\[)\\|/g, '$1'); // Remove empty entities from start of alt/opts\n\t\tregexp = regexp.replace(/\\|(\\)|\\])/g, '$1'); // Remove empty entities from end of alt/opts\n\n\t\t// UTF-8 mode special characters.\n\t\tif (self.utf8) {\n\t\t\tregexp = regexp.replace(/\\\\@/, \"\\\\u0040\"); // @ symbols conflict w/ arrays\n\t\t}\n\n\t\t// Optionals.\n\t\tlet match = regexp.match(/\\[(.+?)\\]/);\n\t\tlet giveup = 0;\n\t\twhile (match) {\n\t\t\tif (giveup++ > 50) {\n\t\t\t\tself.warn(\"Infinite loop when trying to process optionals in a trigger!\");\n\t\t\t\treturn \"\";\n\t\t\t}\n\n\t\t\t// The resulting regexp needs to work in two scenarios:\n\t\t\t// 1) The user included the optional word(s) in which case they must be\n\t\t\t//    in the message surrounded by a space or a word boundary (e.g. the\n\t\t\t//    end or beginning of their message)\n\t\t\t// 2) The user did not include the word, meaning the whole entire set of\n\t\t\t//    words should be \"OR'd\" with a word boundary or one or more spaces.\n\t\t\t//\n\t\t\t// The resulting regexp ends up looking like this, for a given input\n\t\t\t// trigger of: what is your [home|office] number\n\t\t\t// what is your(?:(?:\\s|\\b)+home(?:\\s|\\b)+|(?:\\s|\\b)+office(?:\\s|\\b)+|(?:\\b|\\s)+)number\n\t\t\t//\n\t\t\t// See https://github.com/aichaos/rivescript-js/issues/48\n\n\t\t\tlet parts = match[1].split(\"|\");\n\t\t\tlet opts = [];\n\t\t\tfor (let j = 0, len = parts.length; j < len; j++) {\n\t\t\t\tlet p = parts[j];\n\t\t\t\topts.push(`(?:\\\\s|\\\\b)+${p}(?:\\\\s|\\\\b)+`);\n\t\t\t}\n\n\t\t\t// If this optional had a star or anything in it, make it non-matching.\n\t\t\tlet pipes = opts.join(\"|\");\n\t\t\tpipes = pipes.replace(new RegExp(utils.quotemeta(\"(.+?)\"), \"g\"), \"(?:.+?)\");\n\t\t\tpipes = pipes.replace(new RegExp(utils.quotemeta(\"(\\\\d+?)\"), \"g\"), \"(?:\\\\d+?)\");\n\t\t\tpipes = pipes.replace(new RegExp(utils.quotemeta(\"(\\\\w+?)\"), \"g\"), \"(?:\\\\w+?)\");\n\n\t\t\t// Temporarily dummy out the literal square brackets so we don't loop forever\n\t\t\t// thinking that the [\\s\\b] part is another optional.\n\t\t\tpipes = pipes.replace(/\\[/g, \"__lb__\").replace(/\\]/g, \"__rb__\");\n\t\t\tregexp = regexp.replace(new RegExp(\"\\\\s*\\\\[\" + utils.quotemeta(match[1]) + \"\\\\]\\\\s*\"), `(?:${pipes}|(?:\\\\b|\\\\s)+)`);\n\t\t\tmatch = regexp.match(/\\[(.+?)\\]/);\n\t\t}\n\n\t\t// Restore the literal square brackets.\n\t\tregexp = regexp.replace(/__lb__/g, \"[\").replace(/__rb__/g, \"]\");\n\n\t\t// _ wildcards can't match numbers! Quick note on why I did it this way:\n\t\t// the initial replacement above (_ => (\\w+?)) needs to be \\w because the\n\t\t// square brackets in [\\s\\d] will confuse the optionals logic just above.\n\t\t// So then we switch it back down here. Also, we don't just use \\w+ because\n\t\t// that matches digits, and similarly [A-Za-z] doesn't work with Unicode,\n\t\t// so this regexp excludes spaces and digits instead of including letters.\n\t\tregexp = regexp.replace(/\\\\w/g, \"[^\\\\s\\\\d]\");\n\n\t\t// Filter in arrays.\n\t\tgiveup = 0;\n\t\twhile (regexp.indexOf(\"@\") > -1) {\n\t\t\tif (giveup++ > 50) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet match = regexp.match(/\\@(.+?)\\b/);\n\t\t\tif (match) {\n\t\t\t\tlet name = match[1];\n\t\t\t\tlet rep = \"\";\n\t\t\t\tif (self.master._array[name]) {\n\t\t\t\t\trep = \"(?:\" + self.master._array[name].join(\"|\") + \")\";\n\t\t\t\t}\n\t\t\t\tregexp = regexp.replace(new RegExp(\"@\" + utils.quotemeta(name) + \"\\\\b\"), rep);\n\t\t\t}\n\t\t}\n\n\t\t// Filter in bot variables.\n\t\tgiveup = 0;\n\t\twhile (regexp.indexOf(\"<bot\") > -1) {\n\t\t\tif (giveup++ > 50) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet match = regexp.match(/<bot (.+?)>/i);\n\t\t\tif (match) {\n\t\t\t\tlet name = match[1];\n\t\t\t\tlet rep = '';\n\t\t\t\tif (self.master._var[name]) {\n\t\t\t\t\trep = utils.stripNasties(self.master._var[name], self.utf8);\n\t\t\t\t}\n\t\t\t\tregexp = regexp.replace(new RegExp(\"<bot \" + utils.quotemeta(name) + \">\"), rep.toLowerCase());\n\t\t\t}\n\t\t}\n\t\t// Filter in user variables.\n\t\tgiveup = 0;\n\t\twhile (regexp.indexOf(\"<get\") > -1) {\n\t\t\tif (giveup++ > 50) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet match = regexp.match(/<get (.+?)>/i);\n\t\t\tif (match) {\n\t\t\t\tlet name = match[1];\n\t\t\t\tlet rep = (await self.master.getUservar(user, name));\n\t\t\t\tregexp = regexp.replace(new RegExp(\"<get \" + utils.quotemeta(name) + \">\", \"ig\"), rep.toLowerCase());\n\t\t\t}\n\t\t}\n\t\t// Filter in input/reply tags.\n\t\tgiveup = 0;\n\t\tregexp = regexp.replace(/<input>/i, \"<input1>\");\n\t\tregexp = regexp.replace(/<reply>/i, \"<reply1>\");\n\t\tlet history = (await self.master._session.get(user, \"__history__\"));\n\t\tif (history == \"undefined\") { // purposeful typecast\n\t\t\thistory = newHistory();\n\t\t}\n\t\twhile (regexp.indexOf(\"<input\") > -1 || regexp.indexOf(\"<reply\") > -1) {\n\t\t\tif (giveup++ > 50) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet ref = [\"input\", \"reply\"];\n\t\t\tfor (let k = 0, len1 = ref.length; k < len1; k++) {\n\t\t\t\tlet type = ref[k];\n\t\t\t\tfor (let i = 1; i <= 9; i++) {\n\t\t\t\t\tif (regexp.indexOf(`<${type}${i}>`) > -1) {\n\t\t\t\t\t\tlet value = self.formatMessage(history[type][i - 1], type === \"reply\");\n\t\t\t\t\t\tregexp = regexp.replace(new RegExp(`<${type}${i}>`, \"g\"), value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Recover escaped Unicode symbols.\n\t\tif (self.utf8 && regexp.indexOf(\"\\\\u\") > -1) {\n\t\t\tregexp = regexp.replace(/\\\\u([A-Fa-f0-9]{4})/, function (match, grp) {\n\t\t\t\treturn String.fromCharCode(parseInt(grp, 16));\n\t\t\t});\n\t\t}\n\n\t\t// Prevent accidental wildcard match due to double-pipe (e.g. /hi||hello/)\n\t\tregexp = regexp.replace(/\\|{2,}/mg, '|');\n\t\treturn regexp;\n\t}\n\n\tasync handleTag(rive, user, content, scope, depth) {\n\t\tlet tag = \"\";\n\t\tlet reminder = \"\";\n\t\tfor (let i = 0; i < content.length; i++) {\n\t\t\tif (tags[tag]) {\n\t\t\t\treminder = content.substring(i + 1);\n\t\t\t\tbreak;\n\t\t\t} else if (content[i] === \" \") {\n\t\t\t\treminder = content.substring(i + 1);\n\t\t\t\tbreak;\n\t\t\t} else if (content[i] === \">\") {\n\t\t\t\treminder = content.substring(i + 1);\n\t\t\t\treturn { response: \"<\" + tag + \">\", reminder };\n\t\t\t}\n\t\t\ttag += content[i];\n\t\t}\n\n\t\tconst selfClosing = tags[tag] ? tags[tag].selfClosing : true;\n\t\tconst endTag = selfClosing ? \">\" : \"</\" + tag + \">\";\n\t\tconst result = await this.parseComplexTags(rive, user, reminder, scope, depth, endTag);\n\t\treminder = result.reminder;\n\n\t\tconst response = tags[tag] && tags[tag].handle ? await tags[tag].handle(rive, result.response, user, scope) : \"<\" + tag + \" \" + result.response + \">\";\n\t\treturn { response, reminder };\n\t}\n\n\tasync parseComplexTags(rive, user, content, scope, depth, endTag = \"\") {\n\t\tif (depth > 50) return { response: content, reminder: \"\" };\n\n\t\tlet response = '';\n\t\tlet reminder = content;\n\t\tlet nextTag = reminder.indexOf(\"<\");\n\t\tlet nextEnd = endTag ? reminder.indexOf(endTag) : reminder.length;\n\n\t\twhile (reminder.length > 0 && nextTag > -1 && nextTag < nextEnd) {\n\t\t\tresponse += reminder.substring(0, nextTag);\n\t\t\treminder = reminder.substring(nextTag + 1);\n\t\t\tlet result = await this.handleTag(rive, user, reminder, scope, depth + 1);\n\t\t\tresponse += result.response;\n\t\t\treminder = result.reminder;\n\t\t\tnextTag = reminder.indexOf(\"<\");\n\t\t\tnextEnd = endTag ? reminder.indexOf(endTag) : reminder.length;\n\t\t}\n\t\tresponse += reminder.substring(0, nextEnd);\n\t\treminder = reminder.substring(nextEnd + endTag.length);\n\n\t\treturn { response, reminder }\n\t}\n\n\t/**\n\tstring processTags (string user, string msg, string reply, string[] stars,\n\t\t\t\t\t\tstring[] botstars, int step, scope)\n\n\tProcess tags in a reply element.\n\t*/\n\tasync processTags(user, msg, reply, st, bst, step, scope) {\n\t\tvar self = this;\n\n\t\t// Prepare the stars and botstars.\n\t\tlet stars = [\"\"];\n\t\tstars.push.apply(stars, st);\n\t\tlet botstars = [\"\"];\n\t\tbotstars.push.apply(botstars, bst);\n\t\tif (stars.length === 1) {\n\t\t\tstars.push(\"undefined\");\n\t\t}\n\t\tif (botstars.length === 1) {\n\t\t\tbotstars.push(\"undefined\");\n\t\t}\n\n\t\t// Turn arrays into randomized sets.\n\t\tlet match = reply.match(/\\(@([A-Za-z0-9_]+)\\)/i);\n\t\tlet giveup = 0;\n\t\twhile (match) {\n\t\t\tif (giveup++ > self.master._depth) {\n\t\t\t\tself.warn(\"Infinite loop looking for arrays in reply!\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet name = match[1];\n\t\t\tlet result;\n\t\t\tif (self.master._array[name]) {\n\t\t\t\tresult = \"{random}\" + self.master._array[name].join(\"|\") + \"{/random}\";\n\t\t\t} else {\n\t\t\t\t// Dummy it out so we can reinsert it later.\n\t\t\t\tresult = `\\x00@${name}\\x00`;\n\t\t\t}\n\n\t\t\treply = reply.replace(new RegExp(\"\\\\(@\" + utils.quotemeta(name) + \"\\\\)\", \"ig\"), result);\n\t\t\tmatch = reply.match(/\\(@([A-Za-z0-9_]+)\\)/i);\n\t\t}\n\n\t\t// Restore literal arrays that didn't exist.\n\t\treply = reply.replace(/\\x00@([A-Za-z0-9_]+)\\x00/g, \"(@$1)\");\n\n\t\t// Tag shortcuts.\n\t\treply = reply.replace(/<person>/ig, \"{person}<star>{/person}\");\n\t\treply = reply.replace(/<@>/ig, \"{@<star>}\");\n\t\treply = reply.replace(/<formal>/ig, \"{formal}<star>{/formal}\");\n\t\treply = reply.replace(/<sentence>/ig, \"{sentence}<star>{/sentence}\");\n\t\treply = reply.replace(/<uppercase>/ig, \"{uppercase}<star>{/uppercase}\");\n\t\treply = reply.replace(/<lowercase>/ig, \"{lowercase}<star>{/lowercase}\");\n\n\t\t// Weight and star tags.\n\t\treply = reply.replace(/\\{weight=\\d+\\}/ig, \"\"); // Remove {weight}s\n\t\treply = reply.replace(/<star>/ig, stars[1]);\n\t\treply = reply.replace(/<botstar>/ig, botstars[1]);\n\t\tfor (let i = 1, len = stars.length; i <= len; i++) {\n\t\t\treply = reply.replace(new RegExp(`<star${i}>`, \"ig\"), stars[i]);\n\t\t}\n\t\tfor (let i = 1, len = botstars.length; i <= len; i++) {\n\t\t\treply = reply.replace(new RegExp(`<botstar${i}>`, \"ig\"), botstars[i]);\n\t\t}\n\n\t\t// <input> and <reply>\n\t\tlet history = (await self.master._session.get(user, \"__history__\"));\n\t\tif (history == \"undefined\") { // purposeful typecast for `undefined` too\n\t\t\thistory = newHistory();\n\t\t}\n\t\treply = reply.replace(/<input>/ig, history.input ? history.input[0] : \"undefined\");\n\t\treply = reply.replace(/<reply>/ig, history.reply ? history.reply[0] : \"undefined\");\n\t\tfor (let i = 1; i <= 9; i++) {\n\t\t\tif (reply.indexOf(`<input${i}>`) > -1) {\n\t\t\t\treply = reply.replace(new RegExp(`<input${i}>`, \"ig\"), history.input[i - 1]);\n\t\t\t}\n\t\t\tif (reply.indexOf(`<reply${i}>`) > -1) {\n\t\t\t\treply = reply.replace(new RegExp(`<reply${i}>`, \"ig\"), history.reply[i - 1]);\n\t\t\t}\n\t\t}\n\n\t\t// <id> and escape codes\n\t\treply = reply.replace(/<id>/ig, user);\n\t\treply = reply.replace(/\\\\s/ig, \" \");\n\t\treply = reply.replace(/\\\\n/ig, \"\\n\");\n\t\treply = reply.replace(/\\\\#/ig, \"#\");\n\n\t\t// {random}\n\t\tmatch = reply.match(/\\{random\\}(.+?)\\{\\/random\\}/i);\n\t\tgiveup = 0;\n\t\twhile (match) {\n\t\t\tif (giveup++ > self.master._depth) {\n\t\t\t\tself.warn(\"Infinite loop looking for random tag!\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet random = [];\n\t\t\tlet text = match[1];\n\t\t\tif (text.indexOf(\"|\") > -1) {\n\t\t\t\trandom = text.split(\"|\");\n\t\t\t} else {\n\t\t\t\trandom = text.split(\" \");\n\t\t\t}\n\n\t\t\tlet output = random[parseInt(Math.random() * random.length)];\n\t\t\treply = reply.replace(new RegExp(\"\\\\{random\\\\}\" + utils.quotemeta(text) + \"\\\\{\\\\/random\\\\}\", \"ig\"), output);\n\t\t\tmatch = reply.match(/\\{random\\}(.+?)\\{\\/random\\}/i);\n\t\t}\n\n\t\t// Person substitutions & string formatting\n\t\tlet formats = [\"person\", \"formal\", \"sentence\", \"uppercase\", \"lowercase\"];\n\t\tfor (let m = 0, len = formats.length; m < len; m++) {\n\t\t\tlet type = formats[m];\n\t\t\tmatch = reply.match(new RegExp(`{${type}}(.+?){/${type}}`, \"i\"));\n\t\t\tgiveup = 0;\n\t\t\twhile (match) {\n\t\t\t\tgiveup++;\n\t\t\t\tif (giveup >= 50) {\n\t\t\t\t\tself.warn(`Infinite loop looking for ${type} tag!`);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet content = match[1];\n\t\t\t\tlet replace;\n\t\t\t\tif (type === \"person\") {\n\t\t\t\t\treplace = self.substitute(content, \"person\");\n\t\t\t\t} else {\n\t\t\t\t\treplace = utils.stringFormat(type, content);\n\t\t\t\t}\n\n\t\t\t\treply = reply.replace(new RegExp(`{${type}}` + utils.quotemeta(content) + `{/${type}}`, \"ig\"), replace);\n\t\t\t\tmatch = reply.match(new RegExp(`{${type}}(.+?){/${type}}`, \"i\"));\n\t\t\t}\n\t\t}\n\n\t\treply = (await self.parseComplexTags(self.master, user, reply, scope, 0)).response;\n\n\t\t// Topic setter\n\t\tmatch = reply.match(/\\{topic=(.+?)\\}/i);\n\t\tgiveup = 0;\n\t\twhile (match) {\n\t\t\tgiveup++;\n\t\t\tif (giveup >= 50) {\n\t\t\t\tself.warn(\"Infinite loop looking for topic tag!\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet name = match[1];\n\t\t\tawait self.master.setUservar(user, \"topic\", name);\n\t\t\treply = reply.replace(new RegExp(\"{topic=\" + utils.quotemeta(name) + \"}\", \"ig\"), \"\");\n\t\t\tmatch = reply.match(/\\{topic=(.+?)\\}/i); // Look for more\n\t\t}\n\n\t\t// Inline redirector\n\t\tmatch = reply.match(/\\{@([^\\}]*?)\\}/);\n\t\tgiveup = 0;\n\t\twhile (match) {\n\t\t\tgiveup++;\n\t\t\tif (giveup >= 50) {\n\t\t\t\tself.warn(\"Infinite loop looking for redirect tag!\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet target = utils.strip(match[1]);\n\t\t\tself.say(`Inline redirection to: ${target}`);\n\n\t\t\tlet subreply = (await self._getReply(user, target, \"normal\", step + 1, scope));\n\t\t\treply = reply.replace(new RegExp(\"\\\\{@\" + utils.quotemeta(match[1]) + \"\\\\}\", \"i\"), subreply);\n\t\t\tmatch = reply.match(/\\{@([^\\}]*?)\\}/);\n\t\t}\n\n\t\treturn reply;\n\t}\n\n\t/**\n\tstring substitute (string msg, string type)\n\n\tRun substitutions against a message. `type` is either \"sub\" or \"person\" for\n\tthe type of substitution to run.\n\t*/\n\tsubstitute(msg, type) {\n\t\tvar self = this;\n\n\t\t// Safety checking.\n\t\tif (!self.master._sorted[type]) {\n\t\t\tself.master.warn(\"You forgot to call sortReplies()!\");\n\t\t\treturn \"\";\n\t\t}\n\n\t\t// Get the substitutions map.\n\t\tlet subs = type === \"sub\" ? self.master._sub : self.master._person;\n\n\t\t// Get the max number of words in sub/person to minimize interations\n\t\tlet maxwords = type === \"sub\" ? self.master._submax : self.master._personmax;\n\t\tlet result = \"\";\n\n\t\t// Take the original message with no punctuation\n\t\tvar pattern;\n\t\tif (self.master.unicodePunctuation != null) {\n\t\t\tpattern = msg.replace(self.master.unicodePunctuation, \"\");\n\t\t} else {\n\t\t\tpattern = msg.replace(/[.,!?;:]/g, \"\");\n\t\t}\n\n\t\tlet tries = 0;\n\t\tlet giveup = 0;\n\t\tlet subgiveup = 0;\n\n\t\t// Look for words/phrases until there is no \"spaces\" in pattern\n\t\twhile (pattern.indexOf(\" \") > -1) {\n\t\t\tgiveup++;\n\t\t\t// Give up if there are too many substitutions (for safety)\n\t\t\tif (giveup >= 1000) {\n\t\t\t\tself.warn(\"Too many loops when handling substitutions!\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet li = utils.nIndexOf(pattern, \" \", maxwords);\n\t\t\tlet subpattern = pattern.substring(0, li);\n\n\t\t\t// If finds the pattern in sub object replace and stop to look\n\t\t\tresult = subs[subpattern];\n\t\t\tif (result !== undefined) {\n\t\t\t\tmsg = msg.replace(subpattern, result);\n\t\t\t} else {\n\t\t\t\t// Otherwise Look for substitutions in a subpattern\n\t\t\t\twhile (subpattern.indexOf(\" \") > -1) {\n\t\t\t\t\tsubgiveup++;\n\n\t\t\t\t\t// Give up if there are too many substitutions (for safety)\n\t\t\t\t\tif (subgiveup >= 1000) {\n\t\t\t\t\t\tself.warn(\"Too many loops when handling substitutions!\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tli = subpattern.lastIndexOf(\" \");\n\t\t\t\t\tsubpattern = subpattern.substring(0, li);\n\n\t\t\t\t\t// If finds the subpattern in sub object replace and stop to look\n\t\t\t\t\tresult = subs[subpattern];\n\t\t\t\t\tif (result !== undefined) {\n\t\t\t\t\t\tmsg = msg.replace(subpattern, result);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\ttries++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet fi = pattern.indexOf(\" \");\n\t\t\tpattern = pattern.substring(fi + 1);\n\t\t\ttries++;\n\t\t}\n\n\t\t// After all loops, see if just one word is in the pattern\n\t\tresult = subs[pattern];\n\t\tif (result !== undefined) {\n\t\t\tmsg = msg.replace(pattern, result);\n\t\t}\n\n\t\treturn msg;\n\t}\n};\n\nfunction newHistory() {\n\treturn {\n\t\tinput: [\"undefined\", \"undefined\", \"undefined\", \"undefined\", \"undefined\", \"undefined\", \"undefined\", \"undefined\", \"undefined\", \"undefined\"],\n\t\treply: [\"undefined\", \"undefined\", \"undefined\", \"undefined\", \"undefined\", \"undefined\", \"undefined\", \"undefined\", \"undefined\", \"undefined\"]\n\t};\n}\n\nmodule.exports = Brain;\n", "// RiveScript.js\n// https://www.rivescript.com/\n\n// This code is released under the MIT License.\n// See the \"LICENSE\" file for more information.\n\n\"use strict\";\n\n/**\nData sorting functions\n*/\n\nconst utils = require(\"./utils\");\n\n/**\nstring[] sortTriggerSet (string[] triggers[, exclude_previous[, func say]])\n\nSort a group of triggers in an optimal sorting order. The `say` parameter is\na reference to RiveScript.say() or provide your own function (or not) for\ndebug logging from within this function.\n\nThis function has two use cases:\n\n1. create a sort buffer for \"normal\" (matchable) triggers, which are triggers\n   which are NOT accompanied by a %Previous tag.\n2. create a sort buffer for triggers that had %Previous tags.\n\nUse the `exclude_previous` parameter to control which one is being done.\nThis function will return a list of items in the format of\n`[ \"trigger text\", trigger pointer ]` and it's intended to have no duplicate\ntrigger patterns (unless the source RiveScript code explicitly uses the\nsame duplicate pattern twice, which is a user error).\n*/\nexports.sortTriggerSet = function(triggers, exclude_previous, say) {\n\tvar self = this;\n\tvar match;\n\n\tif (say == null) {\n\t\tsay = function(what) {};\n\t}\n\tif (exclude_previous == null) {\n\t\texclude_previous = true;\n\t}\n\n\t// KEEP IN MIND: the `triggers` array is composed of array elements of the form\n\t// [\"trigger text\", pointer to trigger data]\n\t// So this code will use e.g. `trig[0]` when referring to the trigger text.\n\n\t// Create a priority map.\n\tlet prior = {\n\t\t\"0\": []\n\t};\n\n\t// Sort triggers by their weights.\n\tfor (let i = 0, len = triggers.length; i < len; i++) {\n\t\tlet trig = triggers[i];\n\n\t\t// If we're excluding triggers with \"previous\" values, skip them here.\n\t\tif (exclude_previous && (trig[1].previous != null)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tmatch = trig[0].match(/\\{weight=(\\d+)\\}/i);\n\t\tlet weight = 0;\n\t\tif (match && match[1]) {\n\t\t\tweight = match[1];\n\t\t}\n\t\tif (prior[weight] == null) {\n\t\t\tprior[weight] = [];\n\t\t}\n\t\tprior[weight].push(trig);\n\t}\n\n\t// Keep a running list of sorted triggers for this topic.\n\tlet running = [];\n\tlet prior_sort = Object.keys(prior).sort(function(a, b) {\n\t\treturn b - a;\n\t});\n\tfor (let j = 0, len1 = prior_sort.length; j < len1; j++) {\n\t\tlet p = prior_sort[j];\n\t\tsay(`Sorting triggers with priority ${p}`);\n\n\t\t// So, some of these triggers may include an {inherits} tag, if they came\n\t\t// from a topic which inherits another topic. Lower inherits values mean\n\t\t// higher priority on the stack.\n\t\tlet inherits = -1; // -1 means no {inherits} tag\n\t\tlet highest_inherits = -1; // highest number seen so far\n\n\t\t// Loop through and categorize these triggers.\n\t\tlet track = {};\n\t\ttrack[inherits] = initSortTrack();\n\t\tfor (let k = 0, len2 = prior[p].length; k < len2; k++) {\n\t\t\tlet trig = prior[p][k];\n\t\t\tlet pattern = trig[0];\n\t\t\tsay(`Looking at trigger: ${pattern}`);\n\n\t\t\t// See if it has an inherits tag.\n\t\t\tmatch = pattern.match(/\\{inherits=(\\d+)\\}/i);\n\t\t\tif (match) {\n\t\t\t\tinherits = parseInt(match[1]);\n\t\t\t\tif (inherits > highest_inherits) {\n\t\t\t\t\thighest_inherits = inherits;\n\t\t\t\t}\n\t\t\t\tsay(`Trigger belongs to a topic that inherits other topics. Level=${inherits}`);\n\t\t\t\tpattern = pattern.replace(/\\{inherits=\\d+\\}/ig, \"\");\n\t\t\t\ttrig[0] = pattern;\n\t\t\t} else {\n\t\t\t\tinherits = -1;\n\t\t\t}\n\n\t\t\t// If this is the first time we've seen this inheritance level,\n\t\t\t// initialize its sort track structure.\n\t\t\tif (track[inherits] == null) {\n\t\t\t\ttrack[inherits] = initSortTrack();\n\t\t\t}\n\n\t\t\t// Start inspecting the trigger's contents.\n\t\t\tif (pattern.indexOf(\"_\") > -1) {\n\t\t\t\t// Alphabetic wildcard included.\n\t\t\t\tlet cnt = utils.word_count(pattern);\n\t\t\t\tsay(`Has a _ wildcard with ${cnt} words.`);\n\t\t\t\tif (cnt > 0) {\n\t\t\t\t\tif (track[inherits].alpha[cnt] == null) {\n\t\t\t\t\t\ttrack[inherits].alpha[cnt] = [];\n\t\t\t\t\t}\n\t\t\t\t\ttrack[inherits].alpha[cnt].push(trig);\n\t\t\t\t} else {\n\t\t\t\t\ttrack[inherits].under.push(trig);\n\t\t\t\t}\n\t\t\t} else if (pattern.indexOf(\"#\") > -1) {\n\t\t\t\t// Numeric wildcard included.\n\t\t\t\tlet cnt = utils.word_count(pattern);\n\t\t\t\tsay(`Has a # wildcard with ${cnt} words.`);\n\t\t\t\tif (cnt > 0) {\n\t\t\t\t\tif (track[inherits].number[cnt] == null) {\n\t\t\t\t\t\ttrack[inherits].number[cnt] = [];\n\t\t\t\t\t}\n\t\t\t\t\ttrack[inherits].number[cnt].push(trig);\n\t\t\t\t} else {\n\t\t\t\t\ttrack[inherits].pound.push(trig);\n\t\t\t\t}\n\t\t\t} else if (pattern.indexOf(\"*\") > -1) {\n\t\t\t\t// Wildcard included.\n\t\t\t\tlet cnt = utils.word_count(pattern);\n\t\t\t\tsay(`Has a * wildcard with ${cnt} words.`);\n\t\t\t\tif (cnt > 0) {\n\t\t\t\t\tif (track[inherits].wild[cnt] == null) {\n\t\t\t\t\t\ttrack[inherits].wild[cnt] = [];\n\t\t\t\t\t}\n\t\t\t\t\ttrack[inherits].wild[cnt].push(trig);\n\t\t\t\t} else {\n\t\t\t\t\ttrack[inherits].star.push(trig);\n\t\t\t\t}\n\t\t\t} else if (pattern.indexOf(\"[\") > -1) {\n\t\t\t\t// Optionals included.\n\t\t\t\tlet cnt = utils.word_count(pattern);\n\t\t\t\tsay(`Has optionals with ${cnt} words.`);\n\t\t\t\tif (track[inherits].option[cnt] == null) {\n\t\t\t\t\ttrack[inherits].option[cnt] = [];\n\t\t\t\t}\n\t\t\t\ttrack[inherits].option[cnt].push(trig);\n\t\t\t} else {\n\t\t\t\t// Totally atomic\n\t\t\t\tlet cnt = utils.word_count(pattern);\n\t\t\t\tsay(`Totally atomic trigger with ${cnt} words.`);\n\t\t\t\tif (track[inherits].atomic[cnt] == null) {\n\t\t\t\t\ttrack[inherits].atomic[cnt] = [];\n\t\t\t\t}\n\t\t\t\ttrack[inherits].atomic[cnt].push(trig);\n\t\t\t}\n\t\t}\n\n\t\t// Move the no-{inherits} triggers to the bottom of the stack.\n\t\ttrack[highest_inherits + 1] = track['-1'];\n\t\tdelete track['-1'];\n\n\t\t// Add this group to the sort track.\n\t\tlet track_sorted = Object.keys(track).sort(function(a, b) {\n\t\t\treturn a - b;\n\t\t});\n\t\tfor (let l = 0, len3 = track_sorted.length; l < len3; l++) {\n\t\t\tlet ip = track_sorted[l];\n\t\t\tsay(`ip=${ip}`);\n\n\t\t\tconst groups = [\"atomic\", \"option\", \"alpha\", \"number\", \"wild\"];\n\t\t\t// Sort each of the main kinds of triggers by their word counts.\n\t\t\tfor (let m = 0, len4 = groups.length; m < len4; m++) {\n\t\t\t\tlet kind = groups[m];\n\t\t\t\tlet kind_sorted = Object.keys(track[ip][kind]).sort(function(a, b) {\n\t\t\t\t\treturn b - a;\n\t\t\t\t});\n\n\t\t\t\tfor (let n = 0, len5 = kind_sorted.length; n < len5; n++) {\n\t\t\t\t\tlet wordcnt = kind_sorted[n];\n\n\t\t\t\t\t// Triggers with equal word lengths should be sorted by overall\n\t\t\t\t\t// trigger length.\n\t\t\t\t\tlet sorted_by_length = track[ip][kind][wordcnt].sort(function(a, b) {\n\t\t\t\t\t\treturn b.length - a.length;\n\t\t\t\t\t});\n\t\t\t\t\trunning.push.apply(running, sorted_by_length);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the single wildcard triggers.\n\t\t\tlet under_sorted = track[ip].under.sort(function(a, b) {\n\t\t\t\treturn b.length - a.length;\n\t\t\t});\n\t\t\tlet pound_sorted = track[ip].pound.sort(function(a, b) {\n\t\t\t\treturn b.length - a.length;\n\t\t\t});\n\t\t\tlet star_sorted = track[ip].star.sort(function(a, b) {\n\t\t\t\treturn b.length - a.length;\n\t\t\t});\n\t\t\trunning.push.apply(running, under_sorted);\n\t\t\trunning.push.apply(running, pound_sorted);\n\t\t\trunning.push.apply(running, star_sorted);\n\t\t}\n\t}\n\n\treturn running;\n};\n\n/**\nstring[] sortList (string[] items)\n\nSort a list of strings by their word counts and lengths.\n*/\nexports.sortList = function(items) {\n\tvar self = this;\n\n\t// Track by number of words.\n\tlet track = {};\n\n\t// Loop through each item.\n\tfor (let i = 0, len = items.length; i < len; i++) {\n\t\tlet item = items[i];\n\t\tlet cnt = utils.word_count(item, true);\n\t\tif (track[cnt] == null) {\n\t\t\ttrack[cnt] = [];\n\t\t}\n\t\ttrack[cnt].push(item);\n\t}\n\n\t// Sort them.\n\tlet output = [];\n\tlet sorted = Object.keys(track).sort(function(a, b) {\n\t\treturn b - a;\n\t});\n\tfor (let j = 0, len1 = sorted.length; j < len1; j++) {\n\t\tlet count = sorted[j];\n\t\tlet bylen = track[count].sort(function(a, b) {\n\t\t\treturn b.length - a.length;\n\t\t});\n\t\toutput.push.apply(output, bylen);\n\t}\n\n\treturn output;\n};\n\n/**\nprivate object initSortTrack ()\n\nReturns a new object for keeping track of triggers for sorting.\n*/\nconst initSortTrack = function() {\n\treturn {\n\t\tatomic: {},\n\t\toption: {},\n\t\talpha: {},\n\t\tnumber: {},\n\t\twild: {},\n\t\tpound: [],\n\t\tunder: [],\n\t\tstar: []\n\t};\n};\n", "// RiveScript.js\n// https://www.rivescript.com/\n\n// This code is released under the MIT License.\n// See the \"LICENSE\" file for more information.\n\n\"use strict\";\n\nconst utils = require(\"./utils\");\n\n/**\nSessionManager\n\nThis is the interface for session managers that store user variables for\nRiveScript. User variables include those set with the `<set>` tag or the\n`setUservar()` function, as well as recent reply history and private internal\nstate variables.\n\nThe default session manager keeps the variables in memory. This means the bot\ndoesn't remember users after you restart the program; but the functions\n`getUservars()` and `setUservars()` are available to export and import the\nvariables yourself.\n\nIf you prefer a more active session manager that stores and retrieves user\nvariables from a MySQL, MongoDB or Redis database, you can replace the default\nsession manager with one that implements that backend (or write one yourself\nthat implements this SessionManager API).\n\nTo use a session manager, you'd typically do something like:\n\n```javascript\nconst RedisSessions = require(\"rivescript-contrib-redis\");\n\n// Provide the sessionManager option to use this instead of\n// the default MemorySessionManager.\nvar bot = new RiveScript({\n\tsessionManager: new RedisSessions(\"localhost:6379\")\n});\n```\n\nTo implement your own session manager, you should extend the\n`SessionManager` class and implement a compatible object.\n*/\nclass SessionManager {\n\t/**\n\tvoid set(string username, object data)\n\n\tSet user variables for the user `username`. The `args` should be an object\n\tof key/value pairs. The values are usually strings, but they can be other\n\ttypes as well (e.g. arrays or other objects) for some internal data\n\tstructures such as input/reply history.\n\n\tA value of `null` for a variable means it should be deleted from the\n\tuser's session store.\n\t*/\n\tasync set(username, data) {\n\t\tthrow \"Not Implemented\"\n\t}\n\n\t/**\n\tasync get(string username, string key) -> string\n\n\tRetrieve a stored variable for a user.\n\n\tIf the user doesn't exist, this should resolve `null`. If the user *does*\n\texist, but the key does not, this function should resolve the\n\tstring value `\"undefined\"`.\n\t*/\n\tasync get(username, key) {\n\t\tthrow \"Not Implemented\"\n\t}\n\n\t/**\n\tasync getAny(string username) -> object\n\n\tRetrieve all stored user variables for the user `username`.\n\n\tThis should resolve an object of the key/value pairs you have stored for\n\tthe user. If the user doesn't exist, resolve `null`.\n\t*/\n\tasync getAny(username) {\n\t\tthrow \"Not Implemented\"\n\t}\n\n\t/**\n\tasync getAll() -> object\n\n\tRetrieve all variables about all users.\n\n\tThis should return an object that maps usernames to an object of their\n\tvariables. For example:\n\n\t```json\n\t{ \"user1\": {\n\t    \"topic\": \"random\",\n        \"name\": \"Alice\"\n\t  },\n\t  \"user2\": {\n\t    \"topic\": \"random\",\n\t    \"name\": \"Bob\"\n\t  }\n\t}\n\t```\n\t*/\n\tasync getAll() {\n\t\tthrow \"Not Implemented\"\n\t}\n\n\t/**\n\tasync reset(string username)\n\n\tReset all variables stored about a particular user.\n\t*/\n\tasync reset(username) {\n\t\tthrow \"Not Implemented\"\n\t}\n\n\t/**\n\tasync resetAll()\n\n\tReset all data about all users.\n\t*/\n\tasync resetAll() {\n\t\tthrow \"Not Implemented\"\n\t}\n\n\t/**\n\tasync freeze(string username)\n\n\tMake a snapshot of the user's variables so that they can be restored\n\tlater via `thaw()`. This is the implementation for\n\t`RiveScript.freezeUservars()`\n\t*/\n\tasync freeze(username) {\n\t\tthrow \"Not Implemented\"\n\t}\n\n\t/**\n\tasync thaw(string username, string action)\n\n\tRestore the frozen snapshot of variables for a user.\n\n\tThis should replace _all_ of a user's variables with the frozen copy\n\tthat was snapshotted with `freeze()`. If there are no frozen variables,\n\tthis function should be a no-op (maybe print a warning?)\n\n\tValid options for `action` reflect the usage of `rs.thawUservars()`:\n\n\t* `thaw`: Restore the variables and delete the frozen copy (default)\n\t* `discard`: Do not restore the variables, but delete the frozen copy\n\t* `keep`: Restore the variables and keep the frozen copy\n\t*/\n\tasync thaw(username, action) {\n\t\tthrow \"Not Implemented\"\n\t}\n\n\t/**\n\tobject defaultSession()\n\n\tYou do not need to override this method. This returns the default session\n\tvariables for a new user, e.g. with the variable `topic=\"random\"` as per\n\tthe RiveScript spec.\n\t*/\n\tdefaultSession() {\n\t\treturn {\n\t\t\t\"topic\": \"random\"\n\t\t};\n\t}\n}\n\n/**\nMemorySessionManager\n\nThis is the default in-memory session store for RiveScript.\n\nIt keeps all user variables in an object in memory and does not persist them\nto disk. This means it won't remember user variables between reboots of your\nbot's program, but it remembers just fine during its lifetime.\n\nThe RiveScript methods `getUservars()` and `setUservars()` are available to\nexport and import user variables as JSON-serializable objects so that your\nprogram could save them to disk on its own.\n\nSee the documentation for `SessionManager` for information on extending\nRiveScript with an alternative session store.\n*/\nclass MemorySessionManager extends SessionManager {\n\tconstructor() {\n\t\tsuper();\n\t\tvar self = this;\n\t\tself._users = {};\n\t\tself._frozen = {};\n\t}\n\n\t// init makes sure a user exists in the session store.\n\tinit(username) {\n\t\tvar self = this;\n\t\tif (self._users[username] === undefined) {\n\t\t\tself._users[username] = self.defaultSession();\n\t\t}\n\t}\n\n\tasync set(username, data) {\n\t\tvar self = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tself.init(username);\n\t\t\tfor (var key in data) {\n\t\t\t\tif (data.hasOwnProperty(key)) {\n\t\t\t\t\tself._users[username][key] = data[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tasync get(username, key) {\n\t\tvar self = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (self._users[username] === undefined) {\n\t\t\t\tresolve(null);\n\t\t\t} else if (self._users[username][key] !== undefined) {\n\t\t\t\tresolve(self._users[username][key]);\n\t\t\t} else {\n\t\t\t\tresolve(\"undefined\");\n\t\t\t}\n\t\t});\n\t}\n\n\tasync getAny(username) {\n\t\tvar self = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (self._users[username] === undefined) {\n\t\t\t\tresolve(null);\n\t\t\t} else {\n\t\t\t\tresolve(utils.clone(self._users[username]));\n\t\t\t}\n\t\t});\n\t}\n\n\tasync getAll() {\n\t\tvar self = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tresolve(utils.clone(self._users));\n\t\t});\n\t}\n\n\tasync reset(username) {\n\t\tvar self = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (self._users[username] !== undefined) {\n\t\t\t\tdelete self._users[username];\n\t\t\t}\n\t\t\tif (self._frozen[username] !== undefined) {\n\t\t\t\tdelete self._frozen[username];\n\t\t\t}\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tasync resetAll() {\n\t\tvar self = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tself._users = {};\n\t\t\tself._frozen = {};\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tasync freeze(username) {\n\t\tvar self = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (self._users[username] !== undefined) {\n\t\t\t\tself._frozen[username] = utils.clone(self._users[username]);\n\t\t\t\tresolve();\n\t\t\t} else {\n\t\t\t\treject(`freeze(${username}): user not found`);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync thaw(username, action=\"thaw\") {\n\t\tvar self = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (self._frozen[username] !== undefined) {\n\t\t\t\t// OK what are we doing?\n\t\t\t\tswitch (action) {\n\t\t\t\t\tcase \"thaw\":\n\t\t\t\t\t\tself._users[username] = utils.clone(self._frozen[username]);\n\t\t\t\t\t\tdelete self._frozen[username];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"discard\":\n\t\t\t\t\t\tdelete self._frozen[username];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"keep\":\n\t\t\t\t\t\tself._users[username] = utils.clone(self._frozen[username]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treject(\"bad thaw action\");\n\t\t\t\t}\n\t\t\t\tresolve();\n\t\t\t} else {\n\t\t\t\treject(`thaw(${username}): no frozen variables found`);\n\t\t\t}\n\t\t})\n\t}\n}\n\n/**\nNullSessionManager\n\nThis is a session manager implementation that does not remember any user\nvariables. It is mostly useful for unit tests.\n*/\nclass NullSessionManager extends SessionManager {\n\tasync set(username, data) {\n\t\treturn noop();\n\t}\n\tasync get(username, key) {\n\t\treturn noop(\"undefined\");\n\t}\n\tasync getAny(username) {\n\t\treturn noop(null);\n\t}\n\tasync getAll() {\n\t\treturn noop(new Object());\n\t}\n\tasync reset(username) {\n\t\treturn noop()\n\t}\n\tasync resetAll() {\n\t\treturn noop()\n\t}\n\tasync freeze(username) {\n\t\treturn noop()\n\t}\n\tasync thaw(username, action) {\n\t\treturn noop()\n\t}\n}\n\nasync function noop(resp) {\n\treturn new Promise((resolve, reject) => {\n\t\tresolve(resp);\n\t});\n}\n\nmodule.exports.SessionManager = SessionManager\nmodule.exports.MemorySessionManager = MemorySessionManager\nmodule.exports.NullSessionManager = NullSessionManager\n", "// RiveScript.js\n\n// This code is released under the MIT License.\n// See the \"LICENSE\" file for more information.\n\n// http://www.rivescript.com/\n\"use strict\";\nvar JSObjectHandler;\n\n/**\nJSObjectHandler (RiveScript master)\n\nJavaScript Language Support for RiveScript Macros. This support is enabled by\ndefault in RiveScript.js; if you don't want it, override the `javascript`\nlanguage handler to null, like so:\n\n```javascript\nbot.setHandler(\"javascript\", null);\n```\n*/\nJSObjectHandler = class JSObjectHandler {\n\tconstructor(master) {\n\t\tthis._master = master;\n\t\tthis._objects = {};\n\n\t\t// Test for async function support.\n\t\tthis._async = \"\";\n\t\ttry {\n\t\t\teval(\"(async function() {})\");\n\t\t\tthis._async = \"async \";\n\t\t} catch(e) {}\n\t}\n\n\t/**\n\tvoid load (string name, string[]|function code)\n\n\tCalled by the RiveScript object to load JavaScript code.\n\t*/\n\tload(name, code) {\n\t\tvar e, source;\n\t\tif (typeof code === \"function\") {\n\t\t\t// If code is just a js function, store the reference as is\n\t\t\treturn this._objects[name] = code;\n\t\t} else {\n\t\t\t// We need to make a dynamic JavaScript function.\n\t\t\tsource = `this._objects[\"${name}\"] = ${this._async}function(rs, args) {\\n${code.join(\"\\n\")}\\n};\\n`;\n\t\t\ttry {\n\t\t\t\treturn eval(source);\n\t\t\t} catch (error) {\n\t\t\t\te = error;\n\t\t\t\treturn this._master.warn(\"Error evaluating JavaScript object: \" + e.message);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\tstring call (RiveScript rs, string name, string[] fields)\n\n\tCalled by the RiveScript object to execute JavaScript code.\n\t*/\n\tcall(rs, name, fields, scope) {\n\t\tvar e, func, reply;\n\t\t// We have it?\n\t\tif (!this._objects[name]) {\n\t\t\treturn this._master.errors.objectNotFound;\n\t\t}\n\t\t// Call the dynamic method.\n\t\tfunc = this._objects[name];\n\t\treply = \"\";\n\t\ttry {\n\t\t\treply = func.call(scope, rs, fields);\n\t\t} catch (error) {\n\t\t\te = error;\n\t\t\treply = `[ERR: Error when executing JavaScript object: ${e.message}]`;\n\t\t}\n\t\t// Allow undefined responses.\n\t\tif (reply === void 0) {\n\t\t\treply = \"\";\n\t\t}\n\t\treturn reply;\n\t}\n\n};\n\nmodule.exports = JSObjectHandler;\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"path\" has been externalized for browser compatibility. Cannot access \"path.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "var fs = require('fs')\nvar path = require('path')\n\nmodule.exports = read\n\nfunction read(root, filter, files, prefix) {\n  prefix = prefix || ''\n  files = files || []\n  filter = filter || noDotFiles\n\n  var dir = path.join(root, prefix)\n  if (!fs.existsSync(dir)) return files\n  if (fs.statSync(dir).isDirectory())\n    fs.readdirSync(dir)\n    .filter(function (name, index) {\n      return filter(name, index, dir)\n    })\n    .forEach(function (name) {\n      read(root, filter, files, path.join(prefix, name))\n    })\n  else\n    files.push(prefix)\n\n  return files\n}\n\nfunction noDotFiles(x) {\n  return x[0] !== '.'\n}\n", "// RiveScript.js\n// https://www.rivescript.com/\n\n// This code is released under the MIT License.\n// See the \"LICENSE\" file for more information.\n\n\"use strict\";\n\n/**\nNotice to Developers\n\nThe methods prefixed with the word \"private\" *should not be used* by you. They\nare documented here to help the RiveScript library developers understand the\ncode; they are not considered 'stable' API functions and they may change or\nbe removed at any time, for any reason, and with no advance notice.\n\nThe most commonly used private function I've seen developers use is the\n`parse()` function, when they want to load RiveScript code from a string\ninstead of a file. **Do not use this function.** The public API equivalent\nfunction is `stream()`. The parse function will probably be removed in the\nnear future.\n*/\n\n// Constants\nconst VERSION = \"2.2.1\";\n\n// Helper modules\nconst Parser = require(\"./parser\");\nconst Brain = require(\"./brain\");\nconst utils = require(\"./utils\");\nconst sorting = require(\"./sorting\");\nconst inherit_utils = require(\"./inheritance\");\nconst { MemorySessionManager } = require(\"./sessions\");\nconst JSObjectHandler = require(\"./lang/javascript\");\nconst readDir = require(\"fs-readdir-recursive\");\n\n/**\nRiveScript (hash options)\n\nCreate a new RiveScript interpreter. `options` is an object with the\nfollowing keys:\n\n* bool debug:     Debug mode               (default false)\n* int  depth:     Recursion depth limit    (default 50)\n* bool strict:    Strict mode              (default true)\n* bool utf8:      Enable UTF-8 mode        (default false, see below)\n* bool forceCase: Force-lowercase triggers (default false, see below)\n* func onDebug:   Set a custom handler to catch debug log messages (default null)\n* obj  errors:    Customize certain error messages (see below)\n* str  concat:    Globally replace the default concatenation mode when parsing\n\t\t\t\t  RiveScript source files (default `null`. be careful when\n\t\t\t\t  setting this option if using somebody else's RiveScript\n\t\t\t\t  personality; see below)\n* sessionManager: provide a custom session manager to store user variables.\n\t\t\t\t  The default is to store variables in memory, but you may\n\t\t\t\t  use any async data store by providing an implementation of\n\t\t\t\t  RiveScript's SessionManager. See the\n\t\t\t\t  [sessions](./sessions.md) documentation.\n* bool caseSensitive:\n\t\t\t\t  The user's message will not be lowercased when processed\n\t\t\t\t  by the bot; so their original capitalization will be\n\t\t\t\t  preserved when repeated back in <star> tags.\n* regexp unicodePunctuation: \n\t\t\t\t  You may provide a custom regexp for what you define to be\n\t\t\t\t  punctuation characters to be stripped from the user's\n\t\t\t\t  message in UTF-8 mode.\n\n## UTF-8 Mode\n\nIn UTF-8 mode, most characters in a user's message are left intact, except for\ncertain metacharacters like backslashes and common punctuation characters like\n`/[.,!?;:]/`.\n\nIf you want to override the punctuation regexp, you can provide a new one by\nassigning the `unicodePunctuation` attribute of the bot object after\ninitialization. Example:\n\n```javascript\nvar bot = new RiveScript({utf8: true});\nbot.unicodePunctuation = new RegExp(/[.,!?;:]/g);\n```\n\n## Force Case\n\nThis option to the constructor will make RiveScript lowercase all the triggers\nit sees during parse time. This may ease the pain point that authors\nexperience when they need to write a lowercase \"i\" in triggers, for example\na trigger of `i am *`, where the lowercase `i` feels unnatural to type.\n\nBy default a capital ASCII letter in a trigger would raise a parse error.\nSetting the `forceCase` option to `true` will instead silently lowercase the\ntrigger and thus avoid the error.\n\nDo note, however, that this can have side effects with certain Unicode symbols\nin triggers, see [case folding in Unicode](https://www.w3.org/International/wiki/Case_folding).\nIf you need to support Unicode symbols in triggers this may cause problems with\ncertain symbols when made lowercase.\n\n## Global Concat Mode\n\nThe concat (short for concatenation) mode controls how RiveScript joins two\nlines of code together when a `^Continue` command is used in a source file.\nBy default, RiveScript simply joins them together with no symbols inserted in\nbetween (\"none\"); the other options are \"newline\" which joins them with line\nbreaks, or \"space\" which joins them with a single space character.\n\nRiveScript source files can define a *local, file-scoped* setting for this\nby using e.g. `! local concat = newline`, which affects how the continuations\nare joined in the lines that follow.\n\nBe careful when changing the global concat setting if you're using a RiveScript\npersonality written by somebody else; if they were relying on the default\nconcat behavior (didn't specify a `! local concat` option), then changing the\nglobal default will potentially cause formatting issues or trigger matching\nissues when using that personality.\n\nI strongly recommend that you **do not** use this option if you intend to ever\nshare your RiveScript personality with others; instead, explicitly spell out\nthe local concat mode in each source file. It might sound like it will save\nyou a lot of typing by not having to copy and paste a `! local concat` option,\nbut it will likely lead to misbehavior in your RiveScript personality when you\ngive it to somebody else to use in their bot.\n\n## Custom Error Messages\n\nYou can provide any or all of the following properties in the `errors`\nargument to the constructor to override certain internal error messages:\n\n* `replyNotMatched`: The message returned when the user's message does not\nmatch any triggers in your RiveScript code.\n\nThe default is \"ERR: No Reply Matched\"\n\n**Note:** the recommended way to handle this case is to provide a trigger of\nsimply `*`, which serves as the catch-all trigger and is the default one\nthat will match if nothing else matches the user's message. Example:\n\n```\n+ *\n- I don't know what to say to that!\n```\n* `replyNotFound`: This message is returned when the user *did* in fact match\na trigger, but no response was found for the user. For example, if a trigger\nonly checks a set of conditions that are all false and provides no \"normal\"\nreply, this error message is given to the user instead.\n\nThe default is \"ERR: No Reply Found\"\n\n**Note:** the recommended way to handle this case is to provide at least one\nnormal reply (with the `-` command) to every trigger to cover the cases\nwhere none of the conditions are true. Example:\n\n```\n+ hello\n* <get name> != undefined => Hello there, <get name>.\n- Hi there.\n```\n* `objectNotFound`: This message is inserted into the bot's reply in-line when\nit attempts to call an object macro which does not exist (for example, its\nname was invalid or it was written in a programming language that the bot\ncouldn't parse, or that it had compile errors).\n\nThe default is \"[ERR: Object Not Found]\"\n* `deepRecursion`: This message is inserted when the bot encounters a deep\nrecursion situation, for example when a reply redirects to a trigger which\nredirects back to the first trigger, creating an infinite loop.\n\nThe default is \"ERR: Deep Recursion Detected\"\n\nThese custom error messages can be provided during the construction of the\nRiveScript object, or set afterwards on the object's `errors` property.\n\nExamples:\n\n```javascript\nvar bot = new RiveScript({\nerrors: {\nreplyNotFound: \"I don't know how to reply to that.\"\n}\n});\n\nbot.errors.objectNotFound = \"Something went terribly wrong.\";\n```\n*/\nconst RiveScript = (function () {\n\tclass RiveScript {\n\t\t////////////////////////////////////////////////////////////////////////\n\t\t// Constructor and Debug Methods                                      //\n\t\t////////////////////////////////////////////////////////////////////////\n\t\tconstructor(opts) {\n\t\t\tvar self = this;\n\t\t\tif (opts == null) {\n\t\t\t\topts = {};\n\t\t\t}\n\n\t\t\t// Default parameters\n\t\t\tself._debug = opts.debug ? opts.debug : false;\n\t\t\tself._strict = opts.strict ? opts.strict : true;\n\t\t\tself._depth = opts.depth ? parseInt(opts.depth) : 50;\n\t\t\tself._utf8 = opts.utf8 ? opts.utf8 : false;\n\t\t\tself._forceCase = opts.forceCase ? opts.forceCase : false;\n\t\t\tself._onDebug = opts.onDebug ? opts.onDebug : null;\n\t\t\tself._concat = opts.concat ? opts.concat : null;\n\t\t\tself._caseSensitive = opts.caseSensitive ? opts.caseSensitive : false;\n\n\t\t\t// UTF-8 punctuation, overridable by the user.\n\t\t\tself.unicodePunctuation = opts.unicodePunctuation ? opts.unicodePunctuation : new RegExp(/[.,!?;:]/g);\n\n\t\t\t// Customized error messages.\n\t\t\tself.errors = {\n\t\t\t\treplyNotMatched: \"ERR: No Reply Matched\",\n\t\t\t\treplyNotFound: \"ERR: No Reply Found\",\n\t\t\t\tobjectNotFound: \"[ERR: Object Not Found]\",\n\t\t\t\tdeepRecursion: \"ERR: Deep Recursion Detected\"\n\t\t\t};\n\t\t\tif (typeof opts.errors === \"object\") {\n\t\t\t\tlet ref = opts.errors;\n\t\t\t\tfor (let key in ref) {\n\t\t\t\t\tlet value = ref[key];\n\t\t\t\t\tif (opts.errors.hasOwnProperty(key)) {\n\t\t\t\t\t\tself.errors[key] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Identify our runtime environment. Web, or node?\n\t\t\tself._node = {}; // NodeJS objects\n\t\t\tself._runtime = self.runtime();\n\n\t\t\t// Sub-module helpers.\n\t\t\tself.parser = new Parser(self);\n\t\t\tself.brain = new Brain(self);\n\n\t\t\t// Loading files in will be asynchronous, so we'll need to abe able to\n\t\t\t// identify when we've finished loading files! This will be an object\n\t\t\t// to keep track of which files are still pending.\n\t\t\tself._pending = [];\n\t\t\tself._loadCount = 0;\n\n\t\t\t// Internal data structures\n\t\t\tself._global = {}; // 'global' variables\n\t\t\tself._var = {}; // 'bot' variables\n\t\t\tself._sub = {}; // 'sub' substitutions\n\t\t\tself._submax = 1; // 'submax' max words in sub object\n\t\t\tself._person = {}; // 'person' substitutions\n\t\t\tself._personmax = 1; // 'personmax' max words in person object\n\t\t\tself._array = {}; // 'array' variables\n\t\t\tself._session = null; // session manager for user variables\n\t\t\tself._includes = {}; // included topics\n\t\t\tself._inherits = {}; // inherited topics\n\t\t\tself._handlers = {}; // object handlers\n\t\t\tself._objlangs = {}; // map objects to their languages\n\t\t\tself._topics = {}; // main reply structure\n\t\t\tself._thats = {}; // %Previous reply structure (pointers into @_topics)\n\t\t\tself._sorted = {}; // Sorted buffers\n\n\t\t\t// Given any options?\n\t\t\tif (typeof opts === \"object\") {\n\t\t\t\tif (opts.debug) {\n\t\t\t\t\tself._debug = true;\n\t\t\t\t}\n\t\t\t\tif (opts.strict) {\n\t\t\t\t\tself._strict = true;\n\t\t\t\t}\n\t\t\t\tif (opts.depth) {\n\t\t\t\t\tself._depth = parseInt(opts.depth);\n\t\t\t\t}\n\t\t\t\tif (opts.utf8) {\n\t\t\t\t\tself._utf8 = true;\n\t\t\t\t}\n\t\t\t\tif (opts.sessionManager) {\n\t\t\t\t\tself._session = opts.sessionManager;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Initialize the default session manager.\n\t\t\tif (self._session === null) {\n\t\t\t\tself._session = new MemorySessionManager();\n\t\t\t}\n\n\t\t\t// Set the default JavaScript language handler.\n\t\t\tself._handlers.javascript = new JSObjectHandler(self);\n\t\t\tself.say(`RiveScript Interpreter v${VERSION} Initialized.`);\n\t\t\tself.say(`Runtime Environment: ${self._runtime}`);\n\t\t}\n\n\t\t/**\n\t\tstring version ()\n\n\t\tReturns the version number of the RiveScript.js library.\n\t\t*/\n\t\tversion() {\n\t\t\treturn VERSION;\n\t\t}\n\n\t\t/**\n\t\tprivate void runtime ()\n\n\t\tDetect the runtime environment of this module, to determine if we're\n\t\trunning in a web browser or from node.\n\t\t*/\n\t\truntime() {\n\t\t\tvar self = this;\n\n\t\t\t// Webpack and browserify define `process.browser` so this is the best place\n\t\t\t// to check if we're running in a web environment.\n\t\t\tif (process.browser) {\n\t\t\t\treturn \"web\";\n\t\t\t}\n\n\t\t\t// Import the Node filesystem library.\n\t\t\tself._node.fs = require(\"fs\");\n\t\t\treturn \"node\";\n\t\t}\n\n\t\t/**\n\t\tprivate void say (string message)\n\n\t\tThis is the debug function. If debug mode is enabled, the 'message' will be\n\t\tsent to the console via console.log (if available), or to your `onDebug`\n\t\thandler if you defined one.\n\t\t*/\n\t\tsay(message) {\n\t\t\tvar self = this;\n\t\t\tif (self._debug !== true) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Debug log handler defined?\n\t\t\tif (self._onDebug) {\n\t\t\t\treturn self._onDebug(message);\n\t\t\t} else {\n\t\t\t\treturn console.log(message);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\tprivate void warn (string message[, filename, lineno])\n\n\t\tPrint a warning or error message. This is like debug, except it's GOING to\n\t\tbe given to the user one way or another. If the `onDebug` handler is\n\t\tdefined, this is sent there. If `console` is available, this will be sent\n\t\tthere. In a worst case scenario, an alert box is shown.\n\t\t*/\n\t\twarn(message, filename, lineno) {\n\t\t\tvar self = this;\n\n\t\t\t// Provided a file and line?\n\t\t\tif ((filename != null) && (lineno != null)) {\n\t\t\t\tmessage += ` at ${filename} line ${lineno}`;\n\t\t\t}\n\t\t\tif (self._onDebug) {\n\t\t\t\treturn self._onDebug(`[WARNING] ${message}`);\n\t\t\t} else if (console) {\n\t\t\t\tif (console.error) {\n\t\t\t\t\treturn console.error(message);\n\t\t\t\t} else {\n\t\t\t\t\treturn console.log(`[WARNING] ${message}`);\n\t\t\t\t}\n\t\t\t} else if (window) {\n\t\t\t\treturn window.alert(message);\n\t\t\t}\n\t\t}\n\n\t\t////////////////////////////////////////////////////////////////////////\n\t\t// Loading and Parsing Methods                                        //\n\t\t////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\tasync loadFile(string path || array path)\n\n\t\tLoad a RiveScript document from a file. The path can either be a string that\n\t\tcontains the path to a single file, or an array of paths to load multiple\n\t\tfiles. The Promise resolves when all of the files have been parsed and\n\t\tloaded. The Promise rejects on error.\n\n\t\tThis loading method is asynchronous so you must resolve the promise or\n\t\tawait it before you go on to sort the replies.\n\n\t\tFor backwards compatibility, this function can take callbacks instead\n\t\tof returning a Promise:\n\n\t\t> `rs.loadDirectory(path, onSuccess(), onError(err, filename, lineno))`\n\n\t\t* resolves: `()`\n\t\t* rejects: `(string error)`\n\t\t*/\n\t\tasync loadFile(path, onSuccess, onError) {\n\t\t\tvar self = this;\n\n\t\t\t// Did they give us a single path?\n\t\t\tif (typeof path === \"string\") {\n\t\t\t\tpath = [path];\n\t\t\t}\n\n\t\t\tlet promises = new Array();\n\t\t\tfor (let i = 0, len = path.length; i < len; i++) {\n\t\t\t\tlet file = path[i];\n\t\t\t\tself.say(`Request to load file: ${file}`);\n\t\t\t\tpromises.push(function (f) {\n\t\t\t\t\t// This function returns a Promise. How are we going to load\n\t\t\t\t\t// the file?\n\t\t\t\t\tif (self._runtime === \"web\") {\n\t\t\t\t\t\t// Via ajax!\n\t\t\t\t\t\treturn self._ajaxLoadFile(f);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// With node fs module!\n\t\t\t\t\t\treturn self._nodeLoadFile(f);\n\t\t\t\t\t}\n\t\t\t\t}(file));\n\t\t\t}\n\n\t\t\t// The final Promise to return.\n\t\t\tlet promise = new Promise((resolve, reject) => {\n\t\t\t\tPromise.all(promises).then(resolve).catch(reject);\n\t\t\t});\n\n\t\t\t// Legacy callback style?\n\t\t\tif (typeof (onSuccess) === \"function\") {\n\t\t\t\tself.warn(\"DEPRECATED: RiveScript.loadFile() now returns a Promise instead of using callbacks\")\n\t\t\t\treturn promise.then(onSuccess).catch(function (err, filename, lineno) {\n\t\t\t\t\tif (typeof (onError) === \"function\") {\n\t\t\t\t\t\tonError.call(null, err, filename, lineno);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn promise;\n\t\t\t}\n\t\t}\n\n\t\t// Load a file using ajax. DO NOT CALL THIS DIRECTLY.\n\t\t// Returns a Promise.\n\t\tasync _ajaxLoadFile(file) {\n\t\t\tvar self = this;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tlet xhr = new XMLHttpRequest();\n\t\t\t\txhr.open(\"GET\", file, true);\n\t\t\t\txhr.onreadystatechange = () => {\n\t\t\t\t\tvar ref;\n\t\t\t\t\tif (xhr.readyState === 4) {\n\t\t\t\t\t\tlet ref = xhr.status;\n\t\t\t\t\t\tif (ref === 200) {\n\t\t\t\t\t\t\tself.say(`Loading file ${file} complete.`);\n\n\t\t\t\t\t\t\t// Parse it!\n\t\t\t\t\t\t\tlet ok = self.parse(file, xhr.responseText, (err) => {\n\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (ok) {\n\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treject(\"parser error\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.warn(`Network error in XMLHttpRequest for file ${file}`);\n\t\t\t\t\t\t\treject(`Failed to load file ${file}: network error`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\txhr.send(null);\n\t\t\t});\n\t\t}\n\n\t\t// Load a file using node. DO NOT CALL THIS DIRECTLY.\n\t\t// Returns a Promise.\n\t\tasync _nodeLoadFile(file) {\n\t\t\tvar self = this;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\t// Load the file.\n\t\t\t\treturn self._node.fs.readFile(file, (err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Parse it!\n\t\t\t\t\tlet ok = self.parse(file, \"\" + data, (err) => {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t});\n\t\t\t\t\tif (ok) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(\"parser error\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\tasync loadDirectory (string path)\n\n\t\tLoad RiveScript documents from a directory recursively.\n\n\t\tFor backwards compatibility, this function can take callbacks instead\n\t\tof returning a Promise:\n\n\t\t> `rs.loadDirectory(path, onSuccess(), onError(err, filename, lineno))`\n\n\t\tThis function is not supported in a web environment.\n\t\t*/\n\t\tasync loadDirectory(path, onSuccess, onError) {\n\t\t\tvar self = this;\n\t\t\tvar promise = new Promise(function (resolve, reject) {\n\t\t\t\t// Can't be done on the web!\n\t\t\t\tif (self._runtime === \"web\") {\n\t\t\t\t\treject(\"loadDirectory can't be used on the web!\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Verify the directory exists.\n\t\t\t\tself._node.fs.stat(path, (err, stats) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (!stats.isDirectory()) {\n\t\t\t\t\t\treject(`${path} is not a directory`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tself.say(`Loading from directory ${path}`);\n\n\t\t\t\t\t// Load all the files.\n\t\t\t\t\tlet files = readDir(path);\n\t\t\t\t\tlet toLoad = new Array();\n\t\t\t\t\tfor (let i = 0, len = files.length; i < len; i++) {\n\t\t\t\t\t\tlet file = files[i];\n\t\t\t\t\t\tif (file.match(/\\.(rive|rs)$/i)) {\n\t\t\t\t\t\t\t// Keep track of the file's status.\n\t\t\t\t\t\t\ttoLoad.push(path + \"/\" + file);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tself.loadFile(toLoad).then(resolve).catch(reject);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Legacy callback-style?\n\t\t\tif (typeof (onSuccess) === \"function\") {\n\t\t\t\tself.warn(\"DEPRECATED: RiveScript.loadDirectory() now returns a Promise instead of using callbacks\")\n\t\t\t\treturn promise.then(onSuccess).catch(function (err, filename, lineno) {\n\t\t\t\t\tif (typeof (onError) === \"function\") {\n\t\t\t\t\t\tonError.call(null, err, filename, lineno);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn promise;\n\t\t}\n\n\t\t/**\n\t\tbool stream (string code[, func onError])\n\n\t\tLoad RiveScript source code from a string. `code` should be the raw\n\t\tRiveScript source code, with line breaks separating each line.\n\n\t\tThis function is synchronous, meaning it does not return a Promise. It\n\t\tparses the code immediately and returns. Do not fear: the parser runs\n\t\tvery quickly.\n\n\t\tReturns `true` if the code parsed with no error.\n\n\t\tonError function receives: `(err string[, filename str, line_no int])`\n\t\t*/\n\t\tstream(code, onError) {\n\t\t\tvar self = this;\n\t\t\treturn self.parse(\"stream()\", code, onError);\n\t\t}\n\n\t\t/**\n\t\tprivate bool parse (string name, string code[, func onError(string)])\n\n\t\tParse RiveScript code and load it into memory. `name` is a file name in case\n\t\tsyntax errors need to be pointed out. `code` is the source code.\n\n\t\tReturns `true` if the code parsed with no error.\n\t\t*/\n\t\tparse(filename, code, onError) {\n\t\t\tvar self = this;\n\t\t\tself.say(\"Parsing code!\");\n\n\t\t\t// Get the \"abstract syntax tree\"\n\t\t\tlet ok = true;\n\t\t\tlet ast = self.parser.parse(filename, code, (err, fn, ln) => {\n\t\t\t\tif (typeof (onError) === \"function\") {\n\t\t\t\t\tonError.call(null, err, fn, ln);\n\t\t\t\t}\n\t\t\t\tok = false;\n\t\t\t});\n\n\t\t\t// Get all of the \"begin\" type variables: global, var, sub, person, array..\n\t\t\tfor (let type in ast.begin) {\n\t\t\t\tlet vars = ast.begin[type];\n\t\t\t\tif (!ast.begin.hasOwnProperty(type)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet internal = `_${type}` // so \"global\" maps to self._global\n\n\t\t\t\tfor (let name in vars) {\n\t\t\t\t\tlet value = vars[name];\n\t\t\t\t\tif (type === 'sub' || type === 'person') {\n\t\t\t\t\t\tself[internal + \"max\"] = Math.max(self[internal + \"max\"], name.split(\" \").length);\n\t\t\t\t\t}\n\t\t\t\t\tif (!vars.hasOwnProperty(name)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (value === \"<undef>\") {\n\t\t\t\t\t\tdelete self[internal][name];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself[internal][name] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Let the scripts set the debug mode and other internals.\n\t\t\tif (self._global.debug != null) {\n\t\t\t\tself._debug = self._global.debug === \"true\";\n\t\t\t}\n\t\t\tif (self._global.depth != null) {\n\t\t\t\tself._depth = parseInt(self._global.depth) || 50;\n\t\t\t}\n\n\t\t\t// Consume all the parsed triggers.\n\t\t\tfor (let topic in ast.topics) {\n\t\t\t\tlet data = ast.topics[topic];\n\t\t\t\tif (!ast.topics.hasOwnProperty(topic)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Keep a map of the topics that are included/inherited under self topic.\n\t\t\t\tif (self._includes[topic] == null) {\n\t\t\t\t\tself._includes[topic] = {};\n\t\t\t\t}\n\t\t\t\tif (self._inherits[topic] == null) {\n\t\t\t\t\tself._inherits[topic] = {};\n\t\t\t\t}\n\t\t\t\tutils.extend(self._includes[topic], data.includes);\n\t\t\t\tutils.extend(self._inherits[topic], data.inherits);\n\n\t\t\t\t// Consume the triggers.\n\t\t\t\tif (self._topics[topic] == null) {\n\t\t\t\t\tself._topics[topic] = [];\n\t\t\t\t}\n\t\t\t\tfor (let i = 0, len = data.triggers.length; i < len; i++) {\n\t\t\t\t\tlet trigger = data.triggers[i];\n\t\t\t\t\tself._topics[topic].push(trigger);\n\n\t\t\t\t\t// Does this trigger have a %Previous? If so, make a pointer to this\n\t\t\t\t\t// exact trigger in @_thats.\n\t\t\t\t\tif (trigger.previous != null) {\n\t\t\t\t\t\t// Initialize the @_thats structure first.\n\t\t\t\t\t\tif (self._thats[topic] == null) {\n\t\t\t\t\t\t\tself._thats[topic] = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (self._thats[topic][trigger.trigger] == null) {\n\t\t\t\t\t\t\tself._thats[topic][trigger.trigger] = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself._thats[topic][trigger.trigger][trigger.previous] = trigger;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Load all the parsed objects.\n\t\t\tlet results = [];\n\t\t\tfor (let j = 0, len = ast.objects.length; j < len; j++) {\n\t\t\t\tlet object = ast.objects[j];\n\n\t\t\t\t// Have a handler for it?\n\t\t\t\tif (self._handlers[object.language]) {\n\t\t\t\t\tself._objlangs[object.name] = object.language;\n\t\t\t\t\tresults.push(self._handlers[object.language].load(object.name, object.code));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ok;\n\t\t}\n\n\t\t/**\n\t\tvoid sortReplies()\n\n\t\tAfter you have finished loading your RiveScript code, call this method to\n\t\tpopulate the various sort buffers. This is absolutely necessary for reply\n\t\tmatching to work efficiently!\n\t\t*/\n\t\tsortReplies() {\n\t\t\tvar self = this;\n\n\t\t\t// (Re)initialize the sort cache.\n\t\t\tself._sorted.topics = {};\n\t\t\tself._sorted.thats = {};\n\n\t\t\tself.say(\"Sorting triggers...\");\n\n\t\t\t// Loop through all the topics.\n\t\t\tfor (let topic in self._topics) {\n\t\t\t\tif (!self._topics.hasOwnProperty(topic)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tself.say(`Analyzing topic ${topic}...`);\n\n\t\t\t\t// Collect a list of all the triggers we're going to worry about. If this\n\t\t\t\t// topic inherits another topic, we need to recursively add those to the\n\t\t\t\t// list as well.\n\t\t\t\tlet allTriggers = inherit_utils.getTopicTriggers(self, topic);\n\n\t\t\t\t// Sort these triggers.\n\t\t\t\tself._sorted.topics[topic] = sorting.sortTriggerSet(allTriggers, true);\n\n\t\t\t\t// Get all of the %Previous triggers for this topic.\n\t\t\t\tlet thatTriggers = inherit_utils.getTopicTriggers(self, topic, true);\n\n\t\t\t\t// And sort them, too.\n\t\t\t\tself._sorted.thats[topic] = sorting.sortTriggerSet(thatTriggers, false);\n\t\t\t}\n\n\t\t\t// Sort the substitution lists.\n\t\t\tself._sorted.sub = sorting.sortList(Object.keys(self._sub));\n\t\t\treturn self._sorted.person = sorting.sortList(Object.keys(self._person));\n\t\t}\n\n\t\t/**\n\t\tdata deparse()\n\n\t\tTranslate the in-memory representation of the loaded RiveScript documents\n\t\tinto a JSON-serializable data structure. This may be useful for developing\n\t\ta user interface to edit RiveScript replies without having to edit the\n\t\tRiveScript code manually, in conjunction with the `write()` method.\n\n\t\tThe format of the deparsed data structure is out of scope for this document,\n\t\tbut there is additional information and examples available in the `eg/`\n\t\tdirectory of the source distribution. You can read the documentation on\n\t\tGitHub here: [RiveScript Deparse](https://github.com/aichaos/rivescript-js/tree/master/eg/deparse)\n\t\t*/\n\t\tdeparse() {\n\t\t\tvar self = this;\n\n\t\t\t// Data to return from this function.\n\t\t\tlet result = {\n\t\t\t\tbegin: {\n\t\t\t\t\tglobal: utils.clone(self._global),\n\t\t\t\t\tvar: utils.clone(self._var),\n\t\t\t\t\tsub: utils.clone(self._sub),\n\t\t\t\t\tperson: utils.clone(self._person),\n\t\t\t\t\tarray: utils.clone(self._array),\n\t\t\t\t\ttriggers: []\n\t\t\t\t},\n\t\t\t\ttopics: utils.clone(self._topics),\n\t\t\t\tinherits: utils.clone(self._inherits),\n\t\t\t\tincludes: utils.clone(self._includes),\n\t\t\t\tobjects: {}\n\t\t\t};\n\n\t\t\tfor (let key in self._handlers) {\n\t\t\t\tresult.objects[key] = {\n\t\t\t\t\t_objects: utils.clone(self._handlers[key]._objects)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Begin topic.\n\t\t\tif (result.topics.__begin__ != null) {\n\t\t\t\tresult.begin.triggers = result.topics.__begin__;\n\t\t\t\tdelete result.topics.__begin__;\n\t\t\t}\n\n\t\t\t// Populate config fields if they differ from the defaults.\n\t\t\tif (self._debug) {\n\t\t\t\tresult.begin.global.debug = self._debug;\n\t\t\t}\n\t\t\tif (self._depth !== 50) {\n\t\t\t\tresult.begin.global.depth = self._depth;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\t/**\n\t\tstring stringify([data deparsed])\n\n\t\tTranslate the in-memory representation of the RiveScript brain back into\n\t\tRiveScript source code. This is like `write()`, but it returns the text of\n\t\tthe source code as a string instead of writing it to a file.\n\n\t\tYou can optionally pass the parameter `deparsed`, which should be a data\n\t\tstructure of the same format that the `deparse()` method returns. If not\n\t\tprovided, the current internal data is used (this function calls `deparse()`\n\t\titself and uses that).\n\n\t\tWarning: the output of this function won't be pretty. For example, no word\n\t\twrapping will be done for your longer replies. The only guarantee is that\n\t\twhat comes out of this function is valid RiveScript code that can be loaded\n\t\tback in later.\n\t\t*/\n\t\tstringify(deparsed) {\n\t\t\tvar self = this;\n\t\t\treturn self.parser.stringify(deparsed);\n\t\t}\n\n\t\t/**\n\t\tvoid write (string filename[, data deparsed])\n\n\t\tWrite the in-memory RiveScript data into a RiveScript text file. This\n\t\tmethod can not be used on the web; it requires filesystem access and can\n\t\tonly run from a Node environment.\n\n\t\tThis calls the `stringify()` method and writes the output into the filename\n\t\tspecified. You can provide your own deparse-compatible data structure,\n\t\tor else the current state of the bot's brain is used instead.\n\t\t*/\n\t\twrite(filename, deparsed) {\n\t\t\tvar self = this;\n\n\t\t\t// Can't be done on the web!\n\t\t\tif (self._runtime === \"web\") {\n\t\t\t\tself.warn(\"write() can't be used on the web!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn self._node.fs.writeFile(filename, self.stringify(deparsed), function (err) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn self.warn(`Error writing to file ${filename}: ${err}`);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t////////////////////////////////////////////////////////////////////////\n\t\t// Public Configuration Methods                                       //\n\t\t////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\tvoid setHandler(string lang, object)\n\n\t\tSet a custom language handler for RiveScript object macros. See the source\n\t\tfor the built-in JavaScript handler (src/lang/javascript.coffee) as an\n\t\texample.\n\n\t\tBy default, JavaScript object macros are enabled. If you want to disable\n\t\tthese (e.g. for security purposes when loading untrusted third-party code),\n\t\tjust set the JavaScript handler to null:\n\n\t\t```javascript\n\t\tvar bot = new RiveScript();\n\t\tbot.setHandler(\"javascript\", null);\n\t\t```\n\t\t*/\n\t\tsetHandler(lang, obj) {\n\t\t\tvar self = this;\n\n\t\t\tif (obj === void 0) {\n\t\t\t\treturn delete self._handlers[lang];\n\t\t\t} else {\n\t\t\t\treturn self._handlers[lang] = obj;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\tvoid setSubroutine(string name, function)\n\n\t\tDefine a JavaScript object macro from your program.\n\n\t\tThis is equivalent to having a JS object defined in the RiveScript code,\n\t\texcept your JavaScript code is defining it instead.\n\t\t*/\n\t\tsetSubroutine(name, code) {\n\t\t\tvar self = this;\n\n\t\t\t// Do we have a JS handler?\n\t\t\tif (self._handlers.javascript) {\n\t\t\t\tself._objlangs[name] = \"javascript\";\n\t\t\t\treturn self._handlers.javascript.load(name, code);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\tvoid setGlobal (string name, string value)\n\n\t\tSet a global variable. This is equivalent to `! global` in RiveScript.\n\t\tSet the value to `undefined` to delete a global.\n\t\t*/\n\t\tsetGlobal(name, value) {\n\t\t\tvar self = this;\n\n\t\t\tif (value === void 0) {\n\t\t\t\treturn delete self._global[name];\n\t\t\t} else {\n\t\t\t\treturn self._global[name] = value;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\tvoid setVariable (string name, string value)\n\n\t\tSet a bot variable. This is equivalent to `! var` in RiveScript.\n\t\tSet the value to `undefined` to delete a bot variable.\n\t\t*/\n\t\tsetVariable(name, value) {\n\t\t\tvar self = this;\n\n\t\t\tif (value === void 0) {\n\t\t\t\treturn delete self._var[name];\n\t\t\t} else {\n\t\t\t\treturn self._var[name] = value;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\tvoid setSubstitution (string name, string value)\n\n\t\tSet a substitution. This is equivalent to `! sub` in RiveScript.\n\t\tSet the value to `undefined` to delete a substitution.\n\t\t*/\n\t\tsetSubstitution(name, value) {\n\t\t\tvar self = this;\n\n\t\t\tif (value === void 0) {\n\t\t\t\treturn delete self._sub[name];\n\t\t\t} else {\n\t\t\t\tself._submax = Math.max(name.split(' ').length, self._submax);\n\t\t\t\treturn self._sub[name] = value;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\tvoid setPerson (string name, string value)\n\n\t\tSet a person substitution. This is equivalent to `! person` in RiveScript.\n\t\tSet the value to `undefined` to delete a person substitution.\n\t\t*/\n\t\tsetPerson(name, value) {\n\t\t\tvar self = this;\n\n\t\t\tif (value === void 0) {\n\t\t\t\treturn delete self._person[name];\n\t\t\t} else {\n\t\t\t\tself._personmax = Math.max(name.split(' ').length, self._personmax);\n\t\t\t\treturn self._person[name] = value;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\tasync setUservar (string user, string name, string value)\n\n\t\tSet a user variable for a user.\n\t\t*/\n\t\tasync setUservar(user, name, value) {\n\t\t\tvar self = this;\n\n\t\t\t// Are we setting the topic and are we forcing case?\n\t\t\tif (name === \"topic\" && self._forceCase) {\n\t\t\t\tvalue = value.toLowerCase();\n\t\t\t}\n\n\t\t\tvar fields = {};\n\t\t\tfields[name] = value;\n\t\t\treturn self._session.set(user, fields);\n\t\t}\n\n\t\t/**\n\t\tasync setUservars (string user, object data)\n\n\t\tSet multiple user variables by providing an object of key/value pairs.\n\t\tEquivalent to calling `setUservar()` for each pair in the object.\n\t\t*/\n\t\tasync setUservars(user, data) {\n\t\t\tvar self = this;\n\t\t\treturn self._session.set(user, data);\n\t\t}\n\n\t\t/**\n\t\tstring getVariable (string name)\n\n\t\tGets a variable. This is equivalent to `<bot name>` in RiveScript.\n\t\t*/\n\t\tgetVariable(name) {\n\t\t\tvar self = this;\n\n\t\t\t// The var exists?\n\t\t\tif (typeof self._var[name] !== \"undefined\") {\n\t\t\t\treturn self._var[name];\n\t\t\t} else {\n\t\t\t\treturn \"undefined\";\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\tasync getUservar (string user, string name) -> value\n\n\t\tGet a variable from a user. Returns the string \"undefined\" if it isn't\n\t\tdefined.\n\t\t*/\n\t\tasync getUservar(user, name) {\n\t\t\tvar self = this;\n\t\t\treturn self._session.get(user, name);\n\t\t}\n\n\t\t/**\n\t\tasync getUservars ([string user]) -> object\n\n\t\tGet all variables about a user. If no user is provided, returns all data\n\t\tabout all users.\n\t\t*/\n\t\tasync getUservars(user) {\n\t\t\tvar self = this;\n\t\t\tif (user === undefined) {\n\t\t\t\treturn self._session.getAll();\n\t\t\t} else {\n\t\t\t\treturn self._session.getAny(user);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\tasync clearUservars ([string user])\n\n\t\tClear all a user's variables. If no user is provided, clears all variables\n\t\tfor all users.\n\t\t*/\n\t\tasync clearUservars(user) {\n\t\t\tvar self = this;\n\t\t\tif (user === undefined) {\n\t\t\t\treturn self._session.resetAll();\n\t\t\t} else {\n\t\t\t\treturn self._session.reset(user);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\tasync freezeUservars (string user)\n\n\t\tFreeze the variable state of a user. This will clone and preserve the user's\n\t\tentire variable state, so that it can be restored later with\n\t\t`thawUservars()`\n\t\t*/\n\t\tasync freezeUservars(user) {\n\t\t\tvar self = this;\n\t\t\treturn self._session.freeze(user);\n\t\t}\n\n\t\t/**\n\t\tasync thawUservars (string user[, string action])\n\n\t\tThaw a user's frozen variables. The action can be one of the following:\n\t\t* discard: Don't restore the variables, just delete the frozen copy.\n\t\t* keep: Keep the frozen copy after restoring\n\t\t* thaw: Restore the variables and delete the frozen copy (default)\n\t\t*/\n\t\tasync thawUservars(user, action = \"thaw\") {\n\t\t\tvar self = this;\n\t\t\treturn self._session.thaw(user, action);\n\t\t}\n\n\t\t/**\n\t\tasync lastMatch (string user) -> string\n\n\t\tRetrieve the trigger that the user matched most recently.\n\t\t*/\n\t\tasync lastMatch(user) {\n\t\t\tvar self = this;\n\t\t\treturn self._session.get(user, \"__lastmatch__\");\n\t\t}\n\n\t\t/**\n\t\tasync initialMatch (string user) -> string\n\n\t\tRetrieve the trigger that the user matched initially. This will return\n\t\tonly the first matched trigger and will not include subsequent redirects.\n\n\t\tThis value is reset on each `reply()` call.\n\t\t*/\n\t\tasync initialMatch(user) {\n\t\t\tvar self = this;\n\t\t\treturn self._session.get(user, \"__initialmatch__\");\n\t\t}\n\n\t\t/**\n\t\tasync lastTriggers (string user) -> object\n\n\t\tRetrieve the triggers that have been matched for the last reply. This\n\t\twill contain all matched trigger with every subsequent redirects.\n\n\t\tThis value is reset on each `reply()` or `replyAsync()` call.\n\t\t*/\n\t\tasync lastTriggers(user) {\n\t\t\tvar self = this;\n\t\t\treturn self._session.get(user, \"__last_triggers__\");\n\t\t}\n\n\t\t/**\n\t\tasync getUserTopicTriggers (string username) -> object\n\n\t\tRetrieve the triggers in the current topic for the specified user. It can\n\t\tbe used to create a UI that gives the user options based on trigges, e.g.\n\t\tusing buttons, select boxes and other UI resources. This also includes the\n\t\ttriggers available in any topics inherited or included by the user's current\n\t\ttopic.\n\n\t\tThis will return `undefined` if the user cant be find\n\t\t*/\n\t\tasync getUserTopicTriggers(user) {\n\t\t\tvar self = this;\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tself._session.get(user, \"topic\").then((topic) => {\n\t\t\t\t\tresolve(inherit_utils.getTopicTriggers(self, topic));\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\tstring currentUser ()\n\n\t\tRetrieve the current user's ID. This is most useful within a JavaScript\n\t\tobject macro to get the ID of the user who invoked the macro (e.g. to\n\t\tget/set user variables for them).\n\n\t\tThis will return undefined if called from outside of a reply context\n\t\t(the value is unset at the end of the `reply()` method)\n\t\t*/\n\t\tcurrentUser() {\n\t\t\tvar self = this;\n\n\t\t\tif (self.brain._currentUser === null) {\n\t\t\t\tself.warn(\"currentUser() is intended to be called from within a JS object macro!\");\n\t\t\t}\n\t\t\treturn self.brain._currentUser;\n\t\t}\n\n\t\t////////////////////////////////////////////////////////////////////////\n\t\t// Reply Fetching Methods                                             //\n\t\t////////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\tPromise reply (string username, string message[, scope])\n\n\t\tFetch a reply from the RiveScript brain. The message doesn't require any\n\t\tspecial pre-processing to be done to it, i.e. it's allowed to contain\n\t\tpunctuation and weird symbols. The username is arbitrary and is used to\n\t\tuniquely identify the user, in the case that you may have multiple\n\t\tdistinct users chatting with your bot.\n\n\t\t**Changed in version 2.0.0:** this function used to return a string, but\n\t\ttherefore didn't support async object macros or session managers. This\n\t\tfunction now returns a Promise (obsoleting the `replyAsync()` function).\n\n\t\tThe optional `scope` parameter will be passed down into any JavaScript\n\t\tobject macros that the RiveScript code executes. If you pass the special\n\t\tvariable `this` as the scope parameter, then `this` in the context of an\n\t\tobject macro will refer to the very same `this` as the one you passed in,\n\t\tso for example the object macro will have access to any local functions\n\t\tor attributes that your code has access to, from the location that `reply()`\n\t\twas called. For an example of this, refer to the `eg/scope` directory in\n\t\tthe source distribution of RiveScript-JS.\n\n\t\tExample:\n\n\t\t```javascript\n\t\t// Normal usage as a promise\n\t\tbot.reply(username, message, this).then(function(reply) {\n\t\t\tconsole.log(\"Bot>\", reply);\n\t\t});\n\n\t\t// Async-Await usage in an async function.\n\t\tasync function getReply(username, message) {\n\t\t\tvar reply = await bot.reply(username, message);\n\t\t\tconsole.log(\"Bot>\", reply);\n\t\t}\n\t\t```\n\t\t*/\n\t\tasync reply(user, msg, scope) {\n\t\t\tvar self = this;\n\t\t\treturn (await self.brain.reply(user, msg, scope));\n\t\t}\n\n\t\t/**\n\t\tPromise replyAsync (string username, string message [[, scope], callback])\n\n\t\t**Obsolete as of v2.0.0** -- use `reply()` instead in new code.\n\n\t\tAsyncronous version of reply. Use replyAsync if at least one of the subroutines\n\t\tused with the `<call>` tag returns a promise.\n\n\t\tExample: using promises\n\n\t\t```javascript\n\t\trs.replyAsync(user, message).then(function(reply) {\n\t\t  console.log(\"Bot>\", reply);\n\t\t}).catch(function(error) {\n\t\t  console.error(\"Error: \", error);\n\t\t});\n\t\t```\n\n\t\tExample: using the callback\n\n\t\t```javascript\n\t\trs.replyAsync(username, msg, this, function(error, reply) {\n\t\t  if (!error) {\n\t\t\tconsole.log(\"Bot>\", reply);\n\t\t  } else {\n\t\t\tconsole.error(\"Error: \", error);\n\t\t  }\n\t\t});\n\t\t```\n\t\t*/\n\t\treplyAsync(user, msg, scope, callback) {\n\t\t\tvar self = this;\n\t\t\tself.warn(\"DEPRECATED FUNCTION: RiveScript.replyAsync() is deprecated; use reply() instead\");\n\n\t\t\tlet reply = self.brain.reply(user, msg, scope);\n\t\t\tif (callback) {\n\t\t\t\treply.then((result) => {\n\t\t\t\t\treturn callback.call(self, null, result);\n\t\t\t\t}).catch((error) => {\n\t\t\t\t\treturn callback.call(self, error, null);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn reply;\n\t\t}\n\n\t};\n\n\t/**\n\tPromise Promise\n\n\t**DEPRECATED**\n\n\tBackwards compatible alias to the native JavaScript `Promise` object.\n\n\t`rs.Promise` used to refer to an `RSVP.Promise` which acted as a polyfill\n\tfor older systems. In new code, return a native Promise directly from your\n\tobject macros.\n\n\tThis enables you to create a JavaScript object macro that returns a promise\n\tfor asynchronous tasks (e.g. polling a web API or database). Example:\n\n\t```javascript\n\trs.setSubroutine(\"asyncHelper\", function (rs, args) {\n\t return new rs.Promise(function (resolve, reject) {\n\t   resolve(42);\n\t });\n\t});\n\t```\n\n\tIf you're using promises in your object macros, you need to get a reply from\n\tthe bot using the `replyAsync()` method instead of `reply()`, for example:\n\n\t```javascript\n\trs.replyAsync(username, message, this).then(function(reply) {\n\t   console.log(\"Bot> \", reply);\n\t});\n\t```\n\t*/\n\tRiveScript.prototype.Promise = Promise;\n\n\treturn RiveScript;\n})();\n\nmodule.exports = RiveScript;\n"],
  "mappings": "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",
  "names": ["exports", "exports", "module", "master", "code", "filename", "name", "fields", "source", "exports", "exports", "module", "name", "master", "e", "match", "len", "content", "exports", "exports", "module", "e", "name", "exports", "module", "exports", "module", "exports", "module", "name", "exports", "module", "JSObjectHandler", "RiveScript", "ref", "err", "code", "name"]
}
